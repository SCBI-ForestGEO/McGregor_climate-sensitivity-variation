setwd("E:/Github_SCBI/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/crown_position_analysis")
dendro2018 <- read.csv("E:/Github_SCBI/tree-growth-and-traits/dendro_subset_ian_paper.csv")
library(ggplot2)
##graphs for Ian analysis with 14 species by canopy/subcanopy
neilcores <- read.csv("E:/Github_SCBI/tree-growth-and-traits/core_list_for_neil.csv")
countsp <- read.csv("E:/Github_SCBI/tree-growth-and-traits/core_chronologies_by_crownposition.csv")
countsp <- countsp[, -c(4:6)]
countsp$crown.position <- gsub("C", "canopy", countsp$crown.position)
countsp$crown.position <- gsub("D", "canopy", countsp$crown.position)
countsp$crown.position <- gsub("S", "subcanopy", countsp$crown.position)
countsp$crown.position <- gsub("I", "subcanopy", countsp$crown.position)
countsp.test <- aggregate(countsp$n.trees, by=list(countsp$crown.position, countsp$sp), FUN=sum)
colnames(countsp.test) <- c("crown.position", "sp", "n.trees")
pdf("crownposition_graphs_by_sp.pdf")
ggplot(data = neilcores) +
aes(x = dbh2018, fill = crown.position) +
geom_histogram(bins = 50) +
scale_fill_brewer(palette = "Paired") +
scale_x_continuous(breaks=c(0,350,1500)) +
labs(title = "DBH by Crown Position",
x = "dbh2018 (mm)",
y = "Count") +
theme_minimal()
ggplot(data = countsp.test) +
aes(x = sp,fill = crown.position, weight = n.trees) +
geom_bar() +
labs(title = "Number of Crown Positions by Sp",
x = "sp",
y = "N.individuals") +
theme_minimal()
dev.off()
pdf("crownposition_graphs_by_sp.pdf", width=9)
ggplot(data = neilcores) +
aes(x = dbh2018, fill = crown.position) +
geom_histogram(bins = 50) +
scale_fill_brewer(palette = "Paired") +
scale_x_continuous(breaks=c(0,350,1500)) +
labs(title = "DBH by Crown Position",
x = "dbh2018 (mm)",
y = "Count") +
theme_minimal()
ggplot(data = countsp.test) +
aes(x = sp,fill = crown.position, weight = n.trees) +
geom_bar() +
labs(title = "Number of Crown Positions by Sp",
x = "sp",
y = "N.individuals") +
theme_minimal()
dev.off()
setwd("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data")
#read and reformat met data ####
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#make graphs from data ####
## Numbers 1-7 are simple graphs made with ggplot.
## Numbers 8-9 are attempts at more complex graphs, with 9 using plot function. Both need more troubleshooting if going to use.
#basic graphs of 5-minute averages:
library(ggplot2)
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="2018_Weather_Stats.pdf", width=12) #before running the graph scripts
dev.off() #after running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="2018_Weather_Stats.pdf", width=12) #before running the graph scripts
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
getwd()
#read and reformat met data ####
data_2017 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2017_Data/SCB_Metdata_5min_2017.csv", header=FALSE, stringsAsFactors = FALSE)
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#make graphs from data ####
## Numbers 1-7 are simple graphs made with ggplot.
## Numbers 8-9 are attempts at more complex graphs, with 9 using plot function. Both need more troubleshooting if going to use.
#basic graphs of 5-minute averages:
library(ggplot2)
##to make a pdf of any combination of graphs, simply do the following:
setwd("E:/Github_SCBI/tree-growth-and-traits/mettower_analysis (temp)")
pdf(file="2017_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
test <- data_2017[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#make graphs from data ####
## Numbers 1-7 are simple graphs made with ggplot.
## Numbers 8-9 are attempts at more complex graphs, with 9 using plot function. Both need more troubleshooting if going to use.
#basic graphs of 5-minute averages:
library(ggplot2)
##to make a pdf of any combination of graphs, simply do the following:
setwd("E:/Github_SCBI/tree-growth-and-traits/mettower_analysis (temp)")
pdf(file="2017_Weather_Stats.pdf", width=12)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
meas <- read.csv("E:/Github_SCBI/ForC_private/data to add/srdb/new_data/new_MEASUREMENTS.csv")
View(meas)
grepl('[^[:alnum:]]', meas$sites.sitename)
View(meas)
grepl('[^[:punct:]]', meas$sites.sitename)
unwanted_array = list(    'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A', 'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E',
'Ê'='E', 'Ë'='E', 'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O', 'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U',
'Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y', 'Þ'='B', 'ß'='Ss', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a', 'æ'='a', 'ç'='c',
'è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i', 'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o',
'ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ý'='y', 'ý'='y', 'þ'='b', 'ÿ'='y' )
grepl(unwanted_array, meas$sites.sitename)
chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),
string)
