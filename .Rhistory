install.packages("foreign")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ncdf4")
install.packages("ncdf4.helpers")
install.packages("ggvis")
install.packages("rgl")
install.packages("htmlwidgets")
install.packages("googleVis")
install.packages("car")
install.packages("mgcv")
install.packages("lme4")
install.packages("vcd")
install.packages("shiny")
install.packages(c("R", "markdown"))
install.packages(c("xtable", "maps", "ggmap", "sp", "data.table"))
install.packages("chron")
update(R)
update()
census_data_for_cored_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
View(census_data_for_cored_trees)
biannual_data_currentyear <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/biannual/biannual_data_currentyear.csv")
View(biannual_data_currentyear)
intraannual_data_currentyear <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/intraannual/intraannual_data_currentyear.csv")
View(intraannual_data_currentyear)
cored <- census_data_for_cored_trees
biannual <- biannual_data_currentyear
intra <- intraannual_data_currentyear
cored$cored <- 1
biannual$biannual <- 1
intra$intra <- 1
combineddendro <- merge(biannual, intra, by = c("tag", "stemtag") all=TRUE)
combineddendro <- merge(biannual, intra, by = c("tag", "stemtag"), all=TRUE)
View(combineddendro)
rm(combineddendro$census..x, combineddendro$exactdate.x)
rm?
()
rm()
?rm
rm(combineddendro$census..x)
rm("combineddendro$census..x")
df <- combineddendro
df$census..x <- NULL
df$exactdate.x <- NULL
df$measure.x <- NULL
View(df)
df$codes.x <- NULL
df$status.x = df$notes.x <- NULL
df$N.S.x = df$census..y = df$exactdate.y = df$measure.y = df$codes.y = df$status.y = df$notes.y = df$N.S.y <- NULL
df$sp.y = df$quadrat.y = df$lx.y = df$ly.y <- NULL
View(cored)
colnames(cored)[colnames(cored)=="StemTag"] <- "stemtag"
testdf <- merge(df, cored, by = c("tag," "stemtag"), all=TRUE)
testdf <- merge(df, cored, by = c("tag", "stemtag"), all=TRUE)
View(testdf)
testdf$countPOM = testdf$date = testdf$status = testdf$agb = testdf$DFstatus = testdf$ExactDate = testdf$pom = testdf$hom <- NULL
testdf$CensusID = testdf$dbh = testdf$codes <- NULL
testdf$DBHID <- NULL
testdf$sp <- paste(testdf$sp.x, testdf$sp)
testdf$sp <- rm("NA")
u
testdf <- merge(df, cored, by = c("tag", "stemtag"), all=TRUE)
View(testdf)
testdf$countPOM = testdf$date = testdf$status = testdf$agb = testdf$DFstatus = testdf$ExactDate = testdf$pom = testdf$hom <- NULL
testdf$CensusID = testdf$dbh = testdf$codes <- NULL
testdf$DBHID <- NULL
testdf$sp1 = testdf$sp
testdf$sp1[!is.na(testdf$sp.x)] = testdf$sp.x[!is.na(testdf$sp.x)]
View(testdf)
testdf$sp1[(testdf$sp.x)] = testdf$sp.x[(testdf$sp.x)]
testdf$sp1[is.na(testdf$sp.x)] = testdf$sp.x[is.na(testdf$sp.x)]
testdf$sp1[!is.na(testdf$sp.x)] = testdf$sp.x[!is.na(testdf$sp.x)]
unite(testdf, testdf$sp1, testdf$sp.x, testdf$sp)
library(tidyr)
unite(testdf, testdf$sp1, testdf$sp.x, testdf$sp)
unite(testdf, testdf$sp1, c=(testdf$sp.x, testdf$sp))
unite(testdf, "sp1", c(testdf$sp.x, testdf$sp))
testdf$sp1[!is.na(testdf$sp.x)] = testdf$sp.x[!is.na(testdf$sp.x)]
testdf$sp1 = testdf$sp
View(testdf)
testdf$sp1 = testdf$sp = testdf$sp.x
View(testdf)
testdf <- merge(df, cored, by = c("tag", "stemtag"), all=TRUE)
> View(testdf)
> testdf$countPOM = testdf$date = testdf$status = testdf$agb = testdf$DFstatus = testdf$ExactDate = testdf$pom = testdf$hom <- NULL
> testdf$CensusID = testdf$dbh = testdf$codes <- NULL
> testdf$DBHID <- NULL
> testdf$sp1 = testdf$sp
testdf <- merge(df, cored, by = c("tag", "stemtag"), all=TRUE)
View(testdf)
testdf$countPOM = testdf$date = testdf$status = testdf$agb = testdf$DFstatus = testdf$ExactDate = testdf$pom = testdf$hom <- NULL
testdf$CensusID = testdf$dbh = testdf$codes <- NULL
testdf$DBHID <- NULL
testdf$sp1 = testdf$sp
View(testdf)
testdf$sp1 = testdf$sp + testdf$sp.x
?unite
unite(testdf, "sp1", c(testdf$sp.x, testdf$sp))
unite(testdf, "sp1", c(sp.x, sp), remove=FALSE)
View(testdf)
unite(testdf, "sp1", c("sp.x", "sp"), remove=FALSE)
View(testdf)
unite(testdf, "sp1", c("sp.x", "sp"))
testdf$sp1 = ifelse(is.na(testdf$sp.x), testdf$sp,testdf$sp.x)
View(testdf)
?ifelse
testdf$sp1 = ifelse(is.na(sp.x),sp,sp.x)
testdf$sp1 = ifelse(is.na("sp.x"),"sp","sp.x")
View(testdf)
testdf$sp1 = ifelse(is.na(testdf$sp.x), testdf$sp,testdf$sp.x)
View(testdf)
write.csv(testdf, "Combined trees.csv")
getwd()
Combined.trees <- read.csv("I:/Combined trees.csv")
View(Combined.trees)
Merged_dendroband_utm_lat_lon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
View(Merged_dendroband_utm_lat_lon)
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by=c("tag", "stemtag"))
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by=c("tag", "stemtag"))
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by.x=c("tag"), by.y=c ("stemtag"))
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by=c("tag", "stemtag"), all=TRUE)
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by=c("tag", "quadrat"), all=TRUE)
test <- merge(Combined.trees, Merged_dendroband_utm_lat_lon, by=c("tag", "quadrat"))
View(test)
test$X.x = test$X.2 = test$X.1 = test$X.y = NULL
test$sp.y = test$DBHID = test$CensusID = test$dbh = test$pom = test$hom = test$ExactDate = test$countPOM = NULL
test$Annual = test$Intraannual = test$agb = NULL
test$codes = test$date = test$DFstatus = NULL
test$stemtag = NULL
write.csv(test, "tree_sp.csv")
getwd()
install.packages("githubinstall")
install.packages("tidybayes")
install.packages("git2r")
install.packages("plotKML")
install.packages(c("rgdal", "sp"))
install.packages("maptools")
## Load required packages
library(maptools)
library(rgdal)
getwd()
ForC_sites <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/ForC/data/ForC_sites.csv")
View(ForC_sites)
plot(ForC_sites$lat, ForC_sites$lon)
coordinates(ForC_sites)<- c("lat", "lon")
BNG<- CRS("+init=epsg:27700")
`proj4string(ForC_sites)<-BNG
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_wgs84", driver="KML", dataset_options=c("NameField=name"))
?CRS
?proj4string
?spTransform
BNG<- CRS("+init=epsg:3395")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_wgs84", driver="KML", dataset_options=c("NameField=name"))
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC", driver="KML", dataset_options=c("NameField=name"))
BNG<- CRS("+init=epsg:4978")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
?spTransform
?pj_transform
BNG<- CRS("+init=epsg:3786")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_wgs84", driver="KML", dataset_options=c("NameField=name"))
BNG<- CRS("+init=epsg:4979")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_wgs84", driver="KML", dataset_options=c("NameField=name"))
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test", driver="KML", dataset_options=c("NameField=name"))
BNG<- CRS("+init=epsg:4978")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
BNG<- CRS("+init=epsg:32663")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test", driver="KML", dataset_options=c("NameField=name"))
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test1", driver="KML", dataset_options=c("NameField=name"))
coordinates(ForC_sites)<- c("lon", "lat")
library(maptools)
library(rgdal)
library(sp)
ForC_sites <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/ForC/data/ForC_sites.csv")
coordinates(ForC_sites)<- c("lon", "lat")
BNG<- CRS("+init=epsg:3395")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test1", driver="KML", dataset_options=c("NameField=name"))
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test2", driver="KML", dataset_options=c("NameField=name"))
BNG<- CRS("+init=epsg:32663")
proj4string(ForC_sites)<-BNG
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test3", driver="KML", dataset_options=c("NameField=name"))
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test3", driver="KML", dataset_options=c("NameField=name"))
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test4", driver="KML", dataset_options=c("NameField=name"))
summary(test)
BNG<- CRS("+init=epsg:32663")
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
proj4string(ForC_sites)<-BNG
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test4", driver="KML", dataset_options=c("NameField=name"))
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test5", driver="KML", dataset_options=c("NameField=name"))
BNG<- CRS("+init=epsg:4326")
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
proj4string(ForC_sites)<-BNG
BNG<- CRS("+init=epsg:4326")
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(ForC_sites)<-BNG
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_test6", driver="KML", dataset_options=c("NameField=name"))
test <- writeOGR(ForC_wgs84, dsn="ForC_sites_test.kml", layer= "ForC_sites", driver="KML", dataset_options=c("NameField=name"))
test <- writeOGR(ForC_wgs84, dsn="ForC_sites.kml", layer= "ForC_sites", driver="KML", dataset_options=c("NameField=name"))
#adapted from http://spatialanalysis.co.uk/wp-content/uploads/2012/07/exporting-to-kml.txt
library(sp)
library(maptools)
library(rgdal)
getwd()
ForC_sites <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/ForC/data/ForC_sites.csv")
coordinates(ForC_sites)<- c("lon", "lat")
BNG<- CRS("+init=epsg:4326") #reference from http://spatialreference.org/ref/epsg/4326/
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(ForC_sites)<-BNG
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
getwd()
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c(all=TRUE))
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML")
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("site.ID":"duplicate.notes", all=TRUE)
)
library(readr)
ForC_sites_GoogleEarth <- read_csv("ForC_sites_GoogleEarth.kml")
View(ForC_sites_GoogleEarth)
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("SimpleField name=name", all=TRUE))
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("SimpleField name="name"", all=TRUE))
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites")
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML")
writeOGR(ForC_wgs84, dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML")
head(ForC_wgs84)
writeOGR(ForC_wgs84[, c(1:3)], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("NameField=name", all=TRUE))
writeOGR(ForC_wgs84[, c(1:ncol(ForC_wgs84))], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("NameField=name", all=TRUE))
writeOGR(ForC_wgs84[, c(1:ncol(ForC_wgs84))], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML", dataset_options=c("NameField=name", all=TRUE))
ncol(ForC_wgs84)
writeOGR(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML", dataset_options=c("NameField=name", all=TRUE))
writeOGR(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites", driver="KML", dataset_options=c("NameField=name", all=TRUE))
str(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")])
names(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")])
writeOGR(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML")
writeOGR(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites1", driver="KML", dataset_options=c("NameField=SimpleField name", all=TRUE))
writeOGR(ForC_wgs84[, c("site.ID", "sites.sitename", "network", "masl", "geography.notes", "site.notes", "site.ref", "ref.notes", "lacks.info.from.ori.pub", "loaded.from", "loaded.by", "potential_duplicate_group", "potential_duplicate_group_parsed", "confirmed.unique", "potential.duplicates.manual", "duplicate.notes")], dsn="ForC_sites_GoogleEarth.kml", layer= "ForC_sites2", driver="KML", dataset_options=c("NameField=SimpleField name", all=TRUE))
kml(ForC_sites, file="ForC_sites_map_test.kml")
library(plotKML)
kml(ForC_sites, file="ForC_sites_map_test.kml")
?kml
kml(ForC_wgs84, file="ForC_sites_map_test.kml")
install.packages("mapview")
library(mapview)
mapview(ForC_wgs84)
?mapview
View(ForC_wgs84)
View(ForC_sites)
View(ForC_wgs84)
View(ForC_sites)
View(ForC_wgs84)
plotKML::kml(ForC_wgs84),
file.name    = "ForC.kml",
points_names = ForC_sites$sites.sitename)
plotKML::kml((ForC_wgs84),file.name="ForC.kml",points_names = ForC_sites$sites.sitename))
plotKML::kml((ForC_wgs84),file.name="ForC.kml",points_names = ForC_sites$sites.sitename)
install.packages("ggmap")
library(ggmap)
?get_map
?mapview
?ggmap
get_map(source="hybrid")
get_map(source="google", maptype="hybrid")
get_googlemap()
?get_googlemap
tree_sp <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/metadata/tree_sp.csv")
View(tree_sp)
scbi.stemCOMBINED <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stemCOMBINED.xlsx", sep="")
View(scbi.stemCOMBINED)
library(readxl)
scbi_stemCOMBINED <- read_excel("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stemCOMBINED.xlsx")
View(scbi_stemCOMBINED)
Merged_dendroband_utm_lat_lon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
View(Merged_dendroband_utm_lat_lon)
tree_sp <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/metadata/tree_sp.csv")
View(tree_sp)
tree_sp_new <- merge(Merged_dendroband_utm_lat_lon, tree_sp, by=c("tag"))
View(tree_sp_new)
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag"))
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag", "StemTag"))
duplicated(tree_sp_new)
tree_sp_new[!duplicated(tree_sp_new[c('tag')]),]
tree_sp_new1 <- tree_sp_new[!duplicated(tree_sp_new[c('tag')]),]
View(tree_sp_new1)
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag", "StemTag"))
View(tree_sp_new)
View(tree_sp)
View(tree_sp_new)
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag", "StemTag", all=FALSE))
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag", "StemTag"), all=FALSE)
View(tree_sp_new)
View(tree_sp)
View(tree_sp_new1)
View(tree_sp_new)
View(Merged_dendroband_utm_lat_lon)
?grepl
grepl(10011, tree_sp$tag)
tree_sp_new <- merge(tree_sp, Merged_dendroband_utm_lat_lon, by=c("tag", "StemTag", "treeID"), all=FALSE)
View(tree_sp_new)
install.packages("compare")
library(compare)
compare(tree_sp, tree_sp_new,allowAll = TRUE)
comparison<-compare(tree_sp, tree_sp_new,allowAll = TRUE)
View(comparison)
comparison$tag
library(dplyr)
anti_join(tree_sp$tag, tree_sp_new$tag)
anti_join(tree_sp, tree_sp_new)
View(tree_sp)
colnames(tree_sp)
tree_sp$tag
tree_sp_new$tag
getwd(\)
getwd()
write.csv(tree_sp_new, "testthing.csv")
?unique
unique(tree_sp_new)
tree_sp_new1<-unique(tree_sp_new)
View(tree_sp_new1)
tree_sp_new1<-tree_sp_new %>% distinct(tag, .keep_all=TRUE)
View(tree_sp_new1)
tree_sp_new1<-tree_sp_new %>% distinct(tag, StemTag, .keep_all=TRUE)
tree_sp_new1<-tree_sp_new %>% distinct(tag, StemTag, stemID, .keep_all=TRUE)
View(tree_sp_new1)
ifelse(tree_sp$tag==tree_sp_new1, TRUE, FALSE)
ifelse(tree_sp$tag==tree_sp_new1$tag, TRUE, FALSE)
ifelse(tree_sp$tag==tree_sp_new1$tag, TRUE, FALSE)
View(tree_sp_new1)
tree_sp<-c(tree_sp$tag)
tree_sp_new1<-c(tree_sp_new1$tag)
original<-c(tree_sp$tag)
tree_sp <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/metadata/tree_sp.csv")
View(tree_sp)
original<-c(tree_sp$tag)
original[original %in% tree_sp_new1]
original[!(original %in% tree_sp_new1)]
tree_sp_new1<-tree_sp_new %>% distinct(tag, StemTag, stemID, .keep_all=TRUE)
new1<-c(tree_sp_new1$tag)
original[original %in% new1]
original[!(original %in% new1)]
write.csv(tree_sp_new1, "tree_sp.csv")
#adapted from http://spatialanalysis.co.uk/wp-content/uploads/2012/07/exporting-to-kml.txt
library(sp)
library(maptools)
library(rgdal)
library(mapview)
setwd()
ForC_sites <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/ForC/data/ForC_sites.csv")
coordinates(ForC_sites)<- c("lon", "lat")
BNG<- CRS("+init=epsg:4326") #reference from http://spatialreference.org/ref/epsg/4326/
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(ForC_sites)<-BNG
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
mapview(ForC_wgs84, label=ForC_sites$sites.sitename)
#we can use the basic open Esri.WorldImagery behind this and it works. Other maps can be obtained below.
#with mapview it is easy to change symbology, add legends, etc. This can be an option for the future.
library(ggmap)
get_map(source="google", maptype="hybrid")
#for whatever reason it won't let me download the map because it is "403 Forbidden." I have no idea if this is an IT issue or not.
scbi.dendroAll_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/clean_data_files/2018/scbi.dendroAll_2018.csv")
View(scbi.dendroAll_2018)
dendroID_chronology <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/clean_data_files/dendroID_chronology.csv", stringsAsFactors=FALSE)
View(dendroID_chronology)
data_stem<-scbi.dendroAll_2018[which(scbi.dendroAll_2018$survey.ID=='2018.01'), ] #subset by 2018.01 (one entry per stem)
scbi.dendroAll_2018$dendroID <- dendroID_chronology$X2018.dendroID[match(scbi.dendroAll_2018$tag, dendroID_chronology$tag)]
View(scbi.dendroAll_2018)
write.csv(scbi.dendroAll_2018, "scbi.dendroAll_2018.csv")
getwd()
dendro_cored_full <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/clean_data_files/dendro_cored_full.csv")
View(dendro_cored_full)
cores <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/clean_data_files/dendro_trees.csv")
library(data.table)
setnames(cores, old=c("StemTag"), new=c("stemtag"))
dendro_trees$year.cored <-cores$year.cored[match(dendro_trees$tag,cores$tag)]
dendro_merge <- merge(dendro_trees, cores, by=c("tag", "stemtag", "sp", "quadrat", "treeID", "stemID", "status", "gx", "gy","year.cored"), all.x=TRUE, all.y=TRUE)
dendro_all <- dendro_merge[c(1:19)]
##order the data and remove the crossovers (btwn biannual and cored) that don't have biannual marked already
dendro_all <- dendro_all[order(dendro_all$tag,dendro_all$biannual),]
dendro_all$stemID[is.na(dendro_all$stemID)] <- 0
##WARNING:assign stemID values for 30365 and 131352 (discrepancy with 2013 census). THIS PART SHOULD BE DELETED once the 2018 census data includes these tags with the appropriate info.
dendro_all[91,6]=11
dendro_all[867,6]=12
dendro_all<-dendro_all[!duplicated(dendro_all$stemID),]
##populate with geographic coordinates
latlon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
dendro_all$NAD83_X <- latlon$NAD83_X[match(dendro_all$stemID, latlon$stemID)]
dendro_all$NAD83_Y <- latlon$NAD83_Y[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lat <- latlon$lat[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lon <- latlon$lon[match(dendro_all$stemID, latlon$stemID)]
##populate with lx, ly, and status (once ForestGEO 2018 census data is added, use that for base status)
census_2013 <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stem2.csv")
dendro_all$lx <- $lx[match(dendro_all$stemID, $stemID)]
dendro_all$ly <- $ly[match(dendro_all$stemID, $stemID)]
##update status from most recent mortality data (this will update only some of the trees, hence why the census data is used first)
mortality_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data_private/SCBI_mortality/raw data/Mortality_Survey_2018.csv")
dendro_all$status <- mortality_2018$new.status[match(dendro_all$tag, mortality_2018$tag)]
missing <- ifelse(is.na(dendro_all$status), dendro_all$tag, "")
missingdf <- dendro_all[!complete.cases(dendro_all$status),]
missingdf <- missingdf[c(1:2)]
setnames(census_2013, old=c("StemTag"), new=c("stemtag"))
dendro_test <- merge(missingdf, census_2013[,c("tag", "stemtag","status")], by=c("tag","stemtag"))
dendro_all <- merge(dendro_all, dendro_test, by="tag", all.x=TRUE)
setnames(dendro_all, old="stemtag.x", new="stemtag")
library(tidyr)
dendro_all <- unite(dendro_all, status, status.x, status.y)
dendro_all$status <- gsub("_NA", "", dendro_all$status)
dendro_all$status <- gsub("NA_", "", dendro_all$status)
dendro_all$status <- gsub("PD", "D", dendro_all$status)
dendro_all$status <- gsub("DS", "D", dendro_all$status)
dendro_all$status <- gsub("DC", "D", dendro_all$status)
dendro_all$status <- gsub("AU", "A", dendro_all$status)
##get rid of NA
dendro_all$biannual[is.na(dendro_all$biannual)] <- 0
dendro_all$intraannual[is.na(dendro_all$intraannual)] <- 0
dendro_all$cored[is.na(dendro_all$cored)] <- 1
##re-order
dendro_all <- dendro_all[c(1:6,11:13,10,7,14:15,8:9,16:19)]
#get rid of final duplicates now that all rows are the same
dendro_all <- dendro_all[!duplicated(dendro_all),]
write.csv(dendro_all, "dendro_cored_full.csv", row.names=FALSE)
getwd()
dendro_cored_full <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/clean_data_files/dendro_cored_full.csv")
View(dendro_cored_full)
library(dplyr)
dendro <- dendro_cored_full %>%
filter(status==A)
dendro <- dendro_cored_full %>%
filter(status=="A")
View(dendro)
dendro <- dendro[c(1:4,7:11)]
View(dendro)
dendro <- dendro[c(1:4,7:10)]
dendro <- dendro_cored_full %>%
filter(status=="A")
dendro <- dendro[c(1:4,7:10)]
View(dendro)
dendro$crown.position <- ""
View(dendro)
write.csv(dendro, "scbi.crownposition.csv")
getwd()
install.packages(devtools)
install.packages("devtools")
devtools::install_github("forestgeo/fgeo")
library(fgeo)
devtools::install_github("forestgeo/fgeo")
library(fgeo)
fgeo(help)
install.packages(c("animation", "aqp", "backports", "BH", "bookdown", "broom", "callr", "carData", "checkmate", "classInt", "clipr", "colorspace", "curl", "data.table", "dbplyr", "dplR", "dplyr", "e1071", "esquisse", "expss", "flextable", "FNN", "ggmap", "ggvis", "git2r", "googleVis", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "jsonlite", "lemon", "lme4", "mapview", "markdown", "measurements", "mgcv", "nloptr", "openssl", "packrat", "pillar", "plotKML", "processx", "ps", "psych", "purrr", "quantreg", "raster", "rcmdcheck", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rio", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "sessioninfo", "sf", "shiny", "shinyWidgets", "spam", "spData", "stars", "testthat", "tibble", "tidybayes", "tinytex", "tmap", "units", "waveslim", "webshot", "writexl", "xts"))
install.packages("pupR")
dendro2011 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2011.csv")
dendro2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2012.csv")
View(dendro2011)
View(dendro2012)
dendro2012 <- dendro2012[dendro2012$new.band==1, ]
scbi.full2 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.full2.csv", stringsAsFactors=FALSE)
scbi.full2[5340, 3] <- 40874 #duplicated tag
trees <- scbi.full2[scbi.full2$dbh>=100  & !grepl("S", scbi.full2$codes), ]
trees <- trees[c(3,7,8)]
rownames(trees) <- trees[,1]
trees <- trees[, -1]
test <- dist(trees, method="euclidean", diag=TRUE, upper=TRUE)
q <- as.matrix(dist(trees, method="euclidean", diag=TRUE, upper=TRUE))
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation")
write.table(q, "matrix.csv", row.names=FALSE)
install.packages("vegan")
rm(test)
library(vegan)
?vegdist
rm(q)
d <- vegdist(trees, method="euclidean")
m <- data.frame(t(combn(rownames(trees),2)), as.numeric(d))
names(m) <- c("tag1", "tag2", "distance")
write.csv(m, "test.csv", row.names=FALSE)
View(m)
simple <- m[m$distance<=30, ]
View(simple)
names(m) <- c("tree1", "tree2", "distance")
simple <- m[m$distance<=30, ] #only include distances of 30m or less
View(simple)
library(installr)
installr()
