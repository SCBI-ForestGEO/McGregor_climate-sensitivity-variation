for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "horizontal",
legend.position = c(0.5, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=14),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
ggarrange(NEON, heights_other, nrow=2, ncol=1)
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
i=4
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "horizontal",
legend.position = c(0.5, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "horizontal",
legend.position = c(0.6, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
for (i in seq(along=1:3)){
plots_bw[[i]] <- #all graphs
plots_bw[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=plots_bw_order_x[[i]], y=plots_bw_order_y[[i]],
label = plots_bw_order[[i]], fontface="bold", size=7)
if(!i == 1){ #only trait graphs
plots_bw[[i]] <-
plots_bw[[i]] +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
}
}
heights_other <- ggarrange(plots_bw$heights, plots_bw$plot_pla_ht, plots_bw$plot_tlp_ht, nrow=1, ncol=3)
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
heights <-
ggplot(data = current_ht, aes(x = position_all_abb, y = height.m, group = position_all)) +
# aes(x=position_all, y=height.m, fill=year) +
geom_boxplot() +
xlab("Crown position") +
ylab("Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_minimal() +
theme(axis.text = element_text(size=12)) +
theme(axis.title = element_text(size=14))
##3b. create height groupings and graphs (Figure S1) ####
scbi18$height.m <- scbi18_ht$height.m[match(scbi18$stemID, scbi18_ht$stemID)]
scbi18$bins <- cut2(scbi18$height.m, g=19)
scbi18$bins_TWI <- cut2(scbi18$TWI, g=20)
type = c("tlp_ht", "pla_ht", "tlp_twi", "pla_twi")
var = c("mean_TLP_Mpa", "PLA_dry_percent", "mean_TLP_Mpa", "PLA_dry_percent")
breaks_tlp = c(-2.8,-2.6,-2.4,-2.2,-2.0,-1.8)
breaks_pla = c(8,12,16,20,24)
limits_tlp = c(-2.8,-1.8)
limits_pla = c(8,26)
graph_names <- paste0(main$type, "_plot")
for (i in seq(along=1:4)){
if(!grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$lab <- seq(5,95,by=5) #percentiles
df$num <- gsub("^.*,", "", df$bins) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
} else if (grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins_TWI) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$num <- gsub("^.*,", "", df$bins_TWI) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
}
#create plots
if(!grepl("twi", type[[i]])){
q <- ggplot(df, aes(x = avg, y = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbarh(aes(y = num, xmin = sdmin, xmax = sdmax, height=0.5, color=col)) +
scale_y_continuous(breaks=c(0,10,20,30,40,50,60), limits=c(0,60)) +
geom_path(aes(x=avg, y=num, color=col, group=1)) +
ylab("Height [m]") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==1){
q <- q +
xlab("TLP [MPa]") +
scale_x_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==2){
q <- q +
xlab("PLA [%]") +
scale_x_continuous(breaks=breaks_pla, limits=limits_pla)
}
} else if(grepl("twi", type[[i]])){
q <-
ggplot(df[!is.na(df$bins_TWI), ], aes(y = avg, x = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbar(aes(x = num, ymin = sdmin, ymax = sdmax, width=0.25, color=col)) +
geom_path(aes(x=num, y=avg, color=col, group=1)) +
scale_x_continuous(breaks=c(2,6,10,14), limits=c(0,16)) +
xlab("Topographic wetness index") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==3){
q <- q +
ylab("Mean turgor loss point [MPa]") +
scale_y_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==4){
q <- q +
ylab("Percent leaf area [%]") +
scale_y_continuous(breaks=breaks_pla, limits=limits_pla)
}
}
assign(paste0("plot_", type[i]), q)
}
for (i in seq(along=1:3)){
plots_bw[[i]] <- #all graphs
plots_bw[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=plots_bw_order_x[[i]], y=plots_bw_order_y[[i]],
label = plots_bw_order[[i]], fontface="bold", size=7)
if(!i == 1){ #only trait graphs
plots_bw[[i]] <-
plots_bw[[i]] +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
}
}
heights_other <- ggarrange(plots_bw$heights, plots_bw$plot_pla_ht, plots_bw$plot_tlp_ht, nrow=1, ncol=3)
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
###format the other height graphs
plots_bw <- list(heights, plot_pla_ht, plot_tlp_ht)
names(plots_bw) <- c("heights", "plot_pla_ht", "plot_tlp_ht")
plots_bw_order <- c("(e)", "(f)", "(g)")
plots_bw_order_x <- c(0.7, 9, -2.75)
plots_bw_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
plots_bw[[i]] <- #all graphs
plots_bw[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=plots_bw_order_x[[i]], y=plots_bw_order_y[[i]],
label = plots_bw_order[[i]], fontface="bold", size=7)
if(!i == 1){ #only trait graphs
plots_bw[[i]] <-
plots_bw[[i]] +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
}
}
heights_other <- ggarrange(plots_bw$heights, plots_bw$plot_pla_ht, plots_bw$plot_tlp_ht, nrow=1, ncol=3)
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
i=4
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.6, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.6, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.7, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.margin=unit(-1, "mm")
)
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm")
)
for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(0,"cm")
)
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-1,"cm")
)
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
for (i in seq(along=1:4)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.75, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==4){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot, NEON_list$biotemp_plot,  nrow=1, ncol=4, align="h")
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
##3c. Make map of plot using TWI and cored tree locations ####
species <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
cored_points <- SpatialPointsDataFrame(data.frame(species$NAD83_X, species$NAD83_Y), data=species)
plot.new()
plot(topo, axes=FALSE, box=FALSE,
legend.args = list(text="Topographic Wetness Index", side=4, font=2, line=2.5, cex=0.8))
plot(cored_points, pch=20, add=TRUE)
View(cored_points)
species$col <- rbPal(12)[species$sp]
rbPal <- colorRampPalette(c('red','blue'))
species$col <- rbPal(12)[species$sp]
View(species)
?cut
species$col <- rbPal(12)[cut(species$sp, breaks=12)]
?brewer.pal
?I
species$col <- I(brewer.pal(nlevels(sp), name = 'Blues'))
library(RColorBrewer)
species$col <- I(brewer.pal(nlevels(sp), name = 'Blues'))
species$col <- I(brewer.pal(nlevels(species$sp), name = 'Blues'))
nlevels(species$sp)
species$col <- I(brewer.pal(12, name = 'Blues'))
?palette
palette(blues9)
palette(blues12)
colorRamp(blues, 12)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue"),
space = "sp" # Option used when colors do not represent a quantitative scale
)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
species$col <- color_pallete_function(12)
species$sp_fact <- as.factor(species$sp)
nlevels(species$sp_fact)
species <- species[!species$sp %in% c("frni", "pist"), ]
species$sp_fact <- as.factor(species$sp)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
nlevels(species$sp_fact)
species$col <- color_pallete_function(nlevels(species$sp_fact))
data <- diamonds
color_pallete_function <- colorRampPalette(
colors = c("red", "orange", "blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
species_colors <- color_pallete_function(nlevels(species$sp_fact))
##3c. Make map of plot using TWI and cored tree locations ####
species <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
species <- species[!species$sp %in% c("frni", "pist"), ]
species$sp_fact <- as.factor(species$sp)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
species_colors <- color_pallete_function(nlevels(species$sp_fact))
cored_points <- SpatialPointsDataFrame(data.frame(species$NAD83_X, species$NAD83_Y), data=species)
plot(topo, axes=FALSE, box=FALSE,
legend.args = list(text="Topographic Wetness Index", side=4, font=2, line=2.5, cex=0.8))
plot(cored_points, pch=20, col = species_colors[species$sp_fact] add=TRUE)
plot(cored_points, pch=20, col = species_colors[species$sp_fact], add=TRUE)
color_pallete_function <- colorRampPalette(
colors = c("red", "blue", "brown", "purple", "dark green", "light blue"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
species_colors <- color_pallete_function(nlevels(species$sp_fact))
plot(topo, axes=FALSE, box=FALSE,
legend.args = list(text="Topographic Wetness Index", side=4, font=2, line=2.5, cex=0.8))
plot(cored_points, pch=20, col = species_colors[species$sp_fact], add=TRUE)
png("manuscript/tables_figures/Figure3.png", width=5, height=7, units="in", res=300)
plot(topo, axes=FALSE, box=FALSE,
legend.args = list(text="Topographic Wetness Index", side=4, font=2, line=2.5, cex=0.8))
plot(cored_points, pch=20, col = species_colors[species$sp_fact], add=TRUE)
dev.off()
png("manuscript/tables_figures/FigureS3.png", width=5, height=7, units="in", res=300)
plot(topo, axes=FALSE, box=FALSE,
legend.args = list(text="Topographic Wetness Index", side=4, font=2, line=2.5, cex=0.8))
plot(cored_points, pch=20, col = species_colors[species$sp_fact], add=TRUE)
dev.off()
