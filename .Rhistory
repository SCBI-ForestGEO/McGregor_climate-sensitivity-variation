#get rid of random days that aren't full dates
data_analy <- data_analy[grepl(".{10}", data_analy$day), ]
data_analy <- data_analy %>%
group_by(month, verticalPosition) %>%
summarize(mmax = mean(test_max, na.rm=TRUE),
mmin = mean(test_min, na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
View(neon_data_all)
neon_data_all <- NULL
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
View(neon_data_all)
j=1
for (i in seq(along=1:4)){ #make 1:5 if using radiation (cloud vs sun threshold)
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=1:3)){
if (value != "RHMean" & j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if (value == "tempSingleMean"){
neon_data_all$tempSingleMean <- ifelse(neon_data_all$verticalPosition == 10 &
grepl("2018", neon_data_all$day), NA,
neon_data_all$tempSingleMean)
}
#get mean of values per month per verticalPosition
data_analy <- neon_data_all %>%
group_by(day, verticalPosition) %>%
summarize(test_max = max(get(value), na.rm=TRUE),
test_min = min(get(value), na.rm=TRUE))
data_analy$test_max <- ifelse(grepl("Inf", data_analy$test_max), NA, data_analy$test_max)
data_analy$test_min <- ifelse(grepl("Inf", data_analy$test_min), NA, data_analy$test_min)
data_analy$month <- NA
data_analy$month <-
ifelse(grepl(paste0(years[[1]], "-05"), data_analy$day) |
grepl(paste0(years[[2]], "-05"), data_analy$day), "May",
ifelse(grepl(paste0(years[[1]], "-06"), data_analy$day) |
grepl(paste0(years[[2]], "-06"), data_analy$day), "June",
ifelse(grepl(paste0(years[[1]], "-07"), data_analy$day) |
grepl(paste0(years[[2]], "-07"), data_analy$day), "July",
"August")))
#get rid of random days that aren't full dates
data_analy <- data_analy[grepl(".{10}", data_analy$day), ]
data_analy <- data_analy %>%
group_by(month, verticalPosition) %>%
summarize(mmax = mean(test_max, na.rm=TRUE),
mmin = mean(test_min, na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
assign(paste0(dp$data[[i]], "_plot"),
data_analy %>%
arrange(verticalPosition) %>%
ggplot() +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = mmax, y = verticalPosition, color = month_f), shape=19) +
geom_point(aes(x = mmin, y = verticalPosition, color = month_f), shape=17) +
geom_path(aes(x = mmax, y = verticalPosition, color = month_f, linetype = "Max"), size = 1) +
geom_path(aes(x = mmin, y = verticalPosition, color = month_f, linetype = "Min"), size = 1) +
labs(x = dp$xlabs[[i]], y = "Height (m)") +
theme_grey() +
guides(linetype = guide_legend("Line type"))
)
}
graph <- grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2)
i=4
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" & j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
View(neon_data_all)
j=1
value != "RHMean" & j != 1
j=2
value != "RHMean" & j != 1
value != "RHMean" | j != 1
i=1
j=1
value <- dp$value[[i]]
value != "RHMean" | j != 1
i=4
value != "RHMean" | j != 1
value <- dp$value[[i]]
value != "RHMean" | j != 1
j=2
value != "RHMean" | j != 1
j=3
value != "RHMean" | j != 1
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
View(neon_data_all)
library(stringr)
?str_replace
neon_data_sub <- str_replace(neon_data_sub, 2018, 2016)
neon_data_sub$startDateTime <- str_replace(neon_data_sub$startDateTime, 2018, 2016)
neon_data_sub$day <- str_replace(neon_data_sub$day, 2018, 2016)
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_sub$startDateTime <- str_replace(neon_data_sub$startDateTime, "2018", "2016")
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$startDateTime <- str_replace(neon_data_sub$startDateTime, "2018", "2016")
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
View(neon_data_all)
i=1
i=4
j=1
value != "RHMean" | j != 1
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$startDateTime <- str_replace(neon_data_sub$startDateTime, "2018", "2016")
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
View(neon_data_sub)
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$startDateTime <- str_replace(neon_data_sub$startDateTime, "2018", "2016")
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
View(neon_data_all)
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
View(neon_data_all)
#get mean of values per month per verticalPosition
data_analy <- neon_data_all %>%
group_by(day, verticalPosition) %>%
summarize(test_max = max(get(value), na.rm=TRUE),
test_min = min(get(value), na.rm=TRUE))
data_analy$test_max <- ifelse(grepl("Inf", data_analy$test_max), NA, data_analy$test_max)
data_analy$test_min <- ifelse(grepl("Inf", data_analy$test_min), NA, data_analy$test_min)
data_analy$month <- NA
data_analy$month <-
ifelse(grepl(paste0(years[[1]], "-05"), data_analy$day) |
grepl(paste0(years[[2]], "-05"), data_analy$day), "May",
ifelse(grepl(paste0(years[[1]], "-06"), data_analy$day) |
grepl(paste0(years[[2]], "-06"), data_analy$day), "June",
ifelse(grepl(paste0(years[[1]], "-07"), data_analy$day) |
grepl(paste0(years[[2]], "-07"), data_analy$day), "July",
"August")))
#get rid of random days that aren't full dates
data_analy <- data_analy[grepl(".{10}", data_analy$day), ]
data_analy <- data_analy %>%
group_by(month, verticalPosition) %>%
summarize(mmax = mean(test_max, na.rm=TRUE),
mmin = mean(test_min, na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
assign(paste0(dp$data[[i]], "_plot"),
data_analy %>%
arrange(verticalPosition) %>%
ggplot() +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = mmax, y = verticalPosition, color = month_f), shape=19) +
geom_point(aes(x = mmin, y = verticalPosition, color = month_f), shape=17) +
geom_path(aes(x = mmax, y = verticalPosition, color = month_f, linetype = "Max"), size = 1) +
geom_path(aes(x = mmin, y = verticalPosition, color = month_f, linetype = "Min"), size = 1) +
labs(x = dp$xlabs[[i]], y = "Height (m)") +
theme_grey() +
guides(linetype = guide_legend("Line type"))
)
RH_plot
View(data_analy)
library(neonUtilities)
library(plotly)
library(lubridate)
library(dplyr)
library(tidyr)
library(stringr)
library(data.table)
library(gridExtra)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"),
"xlabs" = c("Mean Air Temperature (C)", "Mean Windspeed (m/s)", "Mean Infrared Biological Temperature (C)", "Relative Humidity", "Mean shortwave downward radiation (W/m2)"))
dp[] <- lapply(dp, as.character)
dp$value <- as.character(dp$value)
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
years <- c("2016", "2017", "2018")
for (i in seq(along=dp$value)){ #make 1:5 if using radiation (cloud vs sun threshold)
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else { #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if (value == "tempSingleMean"){
neon_data_all$tempSingleMean <- ifelse(neon_data_all$verticalPosition == 10 &
grepl("2018", neon_data_all$day), NA,
neon_data_all$tempSingleMean)
}
#get mean of values per month per verticalPosition
data_analy <- neon_data_all %>%
group_by(day, verticalPosition) %>%
summarize(test_max = max(get(value), na.rm=TRUE),
test_min = min(get(value), na.rm=TRUE))
data_analy$test_max <- ifelse(grepl("Inf", data_analy$test_max), NA, data_analy$test_max)
data_analy$test_min <- ifelse(grepl("Inf", data_analy$test_min), NA, data_analy$test_min)
data_analy$month <- NA
data_analy$month <-
ifelse(grepl(paste0(years[[1]], "-05"), data_analy$day) |
grepl(paste0(years[[2]], "-05"), data_analy$day), "May",
ifelse(grepl(paste0(years[[1]], "-06"), data_analy$day) |
grepl(paste0(years[[2]], "-06"), data_analy$day), "June",
ifelse(grepl(paste0(years[[1]], "-07"), data_analy$day) |
grepl(paste0(years[[2]], "-07"), data_analy$day), "July",
"August")))
#get rid of random days that aren't full dates
data_analy <- data_analy[grepl(".{10}", data_analy$day), ]
data_analy <- data_analy %>%
group_by(month, verticalPosition) %>%
summarize(mmax = mean(test_max, na.rm=TRUE),
mmin = mean(test_min, na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
assign(paste0(dp$data[[i]], "_plot"),
data_analy %>%
arrange(verticalPosition) %>%
ggplot() +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = mmax, y = verticalPosition, color = month_f), shape=19) +
geom_point(aes(x = mmin, y = verticalPosition, color = month_f), shape=17) +
geom_path(aes(x = mmax, y = verticalPosition, color = month_f, linetype = "Max"), size = 1) +
geom_path(aes(x = mmin, y = verticalPosition, color = month_f, linetype = "Min"), size = 1) +
labs(x = dp$xlabs[[i]], y = "Height (m)") +
theme_grey() +
guides(linetype = guide_legend("Line type"))
)
}
graph <- grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2)
?grid.arrange
library(grid)
graph <- grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2, top = textGrob("NEON Vertical Profile 2016-2018"))
?textGrob
graph <- grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2, top = textGrob(expression(bold("NEON Vertical Profile 2016-2018"))))
#arrange all graphs together and save image
png("manuscript/tables_figures/NEON_vertical_profiles.png", width = 1000, height = 1000, pointsize = 18)
graph <- grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2, top = textGrob(expression(bold("NEON Vertical Profile 2016-2018"))))
dev.off()
