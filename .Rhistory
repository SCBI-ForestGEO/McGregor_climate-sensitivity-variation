colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
View(data)
View(l)
contour <- readOGR("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/shapefiles/contour10m_SIGEO_clipped.shp")
levelplot(topo1, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
View(contour)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
outline <- readOGR("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/shapefiles/ForestGEO_grid_outline.shp")
?crop
topo1 <- crop(topo, outline)
levelplot(topo1, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
?resample
topo1 <- resample(topo, outline)
?sp.lines
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
extent(outline)
extent(topo)
extent(topo) <- extent(outline)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
top1 <- as.data.frame(topo)
View(top1)
top1$x <- coordinates(topo)[1]
top1$y <- coordinates(topo)[2]
View(top1)
head(coordinates(topo))
top1$x <- coordinates(topo)[,1]
top1$y <- coordinates(topo)[,2]
View(top1)
NAD83.SW <- c(747385.521, 4308506.438)
NAD83.NW <- c(747370.676, 4309146.156)
## Angle (in radians) at which the plot's western boundary is offset from true NAD83 line of latitude
Offset <- atan2(NAD83.NW[1] - NAD83.SW[1], NAD83.NW[2] - NAD83.SW[2])
## Function that transforms grid coordinates into NAD83 coordinates
grid2nad83 <- function(x, y) {
NAD83.X <- NAD83.SW[1] + (x*cos(Offset) + y*sin(Offset))
NAD83.Y <- NAD83.SW[2] + (-x*sin(Offset) + y*cos(Offset))
nad83 <- list(NAD83.X, NAD83.Y)
names(nad83) <- c("NAD83_X", "NAD83_Y")
nad83
}
## add NAD83 coordinate columns to SIGEO data table
top2<-data.frame(top1$plot_TWI, grid2nad83(top1$x, top1$y))
View(top2)
## Angle (in radians) at which the plot's western boundary is offset from true NAD83 line of latitude
Offset <- atan2(NAD83.NW[1] - NAD83.SW[1], NAD83.NW[2] - NAD83.SW[2])
## add NAD83 coordinate columns to SIGEO data table
top2<-data.frame(top1$plot_TWI, grid2nad83(top1$x, top1$y))
View(top2)
extent(topo)
extent(outline)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
?clip
?crop
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
#export TWI plot for SCBI plot book
contour <- read.csv("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/elevation/contour10m_SIGEO_coords.csv", stringsAsFactors=FALSE)
data@volcano
data(volcano)
force(volcano)
View(volcano)
?levelplot
cont <- raster(contour)
?raster
View(contour)
contour(contour)
coordinates(contour) <- ~x+y
contour(contour)
View(contour)
View(l)
png("E:/Github_SCBI/SCBI-Plot-Book/maps_figures_tables/ch_2_maps/TWI_map.png", width=5, height=7, units="in", res=300)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
dev.off()
heights
View(heights_allplot)
?cut
#dbh growth showing almost no negative growth from 1999 to 2018 (this means height equations are wrong)
meh$group <- cut(meh$year, breaks=3)
View(meh)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1])]
View(test)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree]
View(test)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][.(avg_gro = mean(gro, na.rm=TRUE))]
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
View(test)
test66 <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
test77 <- meh[year %in% c("1977", "1999"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
test99 <- meh[year %in% c("1999", "2018"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
avg_growth <- data.frame(g66_77 = test66$avg_gro,
g77_99 = test77$avg_gro,
g99_18 = test99$avg_gro)
View(avg_growth)
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
#########################################################################
#2 height by crown position in 2018 ####
library(RCurl) #2
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
trees <- unique(trees_all$sp)
View(scbi.stem3)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
View(scbi.stem3)
test <- scbi.stem3[scbi.stem3$sp %in% trees & scbi.stem3$dbh >= 100, ]
install.packages(c("AICcmodavg", "broom", "car", "data.table", "devtools", "dplR", "dplyr", "dynatopmodel", "elevatr", "ggpubr", "ggthemes", "gridExtra", "lme4", "MuMIn", "piecewiseSEM", "plotly", "pointRes", "purrr", "raster", "RCurl", "rgdal", "rgeos", "sf", "sp", "tidyr"))
library(data.table)
library(RCurl)
library(ggplot2)
library(devtools)
library(stringr)
#1. prepare SCBI data ####
heights <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_heights/SCBI_tree_heights.csv"), stringsAsFactors = FALSE)
dbh_2008 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem1.csv"), stringsAsFactors = FALSE)
dbh_2008$dbh.cm <- as.numeric(dbh_2008$dbh)/10 #cm
View(dbh_2008)
dbh_2013 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem2.csv"), stringsAsFactors = FALSE)
dbh_2013$dbh.cm <- dbh_2013$dbh/10 #cm
dbh_2018 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
View(dbh_2018)
dbh_2018$dbh.cm <- as.numeric(dbh_2018$dbh)/10 #cm
View(heights)
dbh_2018[dbh_2018$tag==10035,]
heights$dbh_regr.cm <- paste0(heights$DBH.2008.cm, heights$DBH.2013.cm, heights$DBH.TLS.2015.cm, heights$DBH.2018.cm)
heights$dbh_regr.cm <- gsub("NA", "", heights$dbh_regr.cm)
heights$dbh_regr.cm <- as.numeric(heights$dbh_regr.cm)
heights$dbh_year <- NA
heights$dbh_year <- ifelse(heights$dbh_regr.cm %in% heights$DBH.2008.cm, 2008,
ifelse(heights$dbh_regr.cm %in% heights$DBH.2013.cm, 2013,
ifelse(heights$dbh_regr.cm %in% heights$DBH.TLS.2015.cm, 2015,
ifelse(heights$dbh_regr.cm %in% heights$DBH.2018.cm, 2018,
heights$dbh_year))))
dup <- heights$stemID[duplicated(heights$stemID)]
heights_dup <- heights[heights$stemID %in% dup, ]
heights_nodup <- heights[!heights$stemID %in% dup, ]
heights_recent <- NULL
for (i in seq(along=unique(heights_dup$stemID))){
sub <- heights_dup[heights_dup$stemID %in% unique(heights_dup$stemID)[[i]], ]
sub <- sub[sub$height.year == max(sub$height.year), ]
heights_recent <- rbind(heights_recent, sub)
}
heights_all <- rbind(heights_nodup, heights_recent)
heights_all <- heights_all[c(1:5,7,9,16:17,26:27)]
View(heights_all)
## sine bias ####
#we are not applying a fix for sine bias because a number of papers that used the sine method also did not apply any corrections. Instead, they (sometimes) acknowledged the error associated with it.
#2. get neon height data ####
file_path <- file.path("data/heights/NEON/neon_heights/")
dirs_map <- dir("data/heights/NEON/neon_heights", pattern="mapping_and_tagging.*$")
dirs_ht <- dir("data/heights/NEON/neon_heights", pattern="neon_ht.*$")
neon_all <- NULL
for (i in seq(along=dirs_map)){
for (j in seq(along=dirs_ht)){
if (i == j){
neon_id <- read.csv(paste(file_path, dirs_map[[i]], sep="//"), stringsAsFactors = FALSE)
neon_ht <- read.csv(paste(file_path, dirs_ht[[j]], sep="//"), stringsAsFactors = FALSE)
id <- neon_id$individualID
neon_id <- neon_id[c("individualID", "taxonID", "scientificName")]
neon_ht$sp <- neon_id$taxonID[match(neon_ht$individualID, neon_id$individualID)]
neon_ht <- neon_ht[c("plotID", "sp", "individualID", "plantStatus", "stemDiameter", "measurementHeight", "height")]
neon_ht$sp <- tolower(neon_ht$sp)
neon_ht$dbh_year <- str_extract(dirs_ht[[j]], "[[:digit:]]*-[[:digit:]]*")
neon_ht$dbh_year <- gsub("-", ".", neon_ht$dbh_year)
setnames(neon_ht, old=c("stemDiameter", "measurementHeight", "height"), new=c("dbh_regr.cm", "dbh_height.cm", "height.m"))
#exclude unknown id (2plant, 2plant-h), vines/shrubs (syor, vitis, ceor7, tora2, paqu2, romu, loma6, loja, rual, ruph, beth, libe), and non-sp-specific (carya, querc, fraxi, ulmus, vibur, pyrus, diosp, rubus)
neon_ht <- neon_ht[!(neon_ht$sp %in% c("2plant", "2plant-h", "syor", "vitis", "ceor7", "tora2", "paqu2", "romu", "loma6", "loja", "rual", "ruph", "beth", "libe3", "carya", "querc", "fraxi", "ulmus", "vibur", "pyrus", "diosp", "rubus")), ]
neon_ht$sp <- ifelse(neon_ht$sp == "asimi", "astr",
ifelse(neon_ht$sp == "fram2", "fram",
ifelse(neon_ht$sp == "cagl8", "cagl",
ifelse(neon_ht$sp == "caov3", "caovl",
ifelse(neon_ht$sp == "sassa", "saal",
ifelse(neon_ht$sp == "cato6", "cato",
ifelse(neon_ht$sp == "cecac", "ceca",
ifelse(neon_ht$sp == "caco15", "caco",
ifelse(neon_ht$sp == "acnen", "acne",
ifelse(neon_ht$sp == "prses", "prse",
ifelse(neon_ht$sp == "qumo4", "qupr",
ifelse(neon_ht$sp == "pivi2", "pivi",
ifelse(neon_ht$sp == "cofl2", "cofl",
ifelse(neon_ht$sp == "pato2", "pato", neon_ht$sp))))))))))))))
#filter out saplings and weird dbh
neon_ht <- neon_ht[!(is.na(neon_ht$dbh_height.cm)) & !(neon_ht$dbh_height.cm <110) & !(neon_ht$dbh_height.cm >150), ]
neon_ht <- neon_ht[grepl("Live", neon_ht$plantStatus), ]
neon_ht <- neon_ht[neon_ht$individualID %in% unique(neon_ht$individualID[neon_ht$dbh_year == max(neon_ht$dbh_year)]), ]
#rbind to have full dataset ####
neon_ht_sub <- neon_ht[c(2,3,5,7,8)]
neon_all <- rbind(neon_all, neon_ht_sub)
}
}
}
View(neon_id)
neon_all <- neon_all[complete.cases(neon_all), ]
neon_all$dbh_year <- as.numeric(neon_all$dbh_year)
#get only one measurement per tree (most recent)
neon_new <- NULL
for (i in seq(along=neon_all$individualID)){
poss <- neon_all[neon_all$individualID == neon_all$individualID[[i]], ]
poss <- poss[poss$dbh_year == max(poss$dbh_year), ]
neon_new <- rbind(neon_new, poss)
}
#get rid of duplicates again (unsure why the loop does this)
neon_new <- neon_new[!duplicated(neon_new$individualID), ]
#get rid of data outliers (impossible height or dbh given the other)
neon_new <- neon_new[!neon_new$individualID %in% c("NEON.PLA.D02.SCBI.03428", "NEON.PLA.D02.SCBI.02787"), ]
#remove individualID so can rbind below
neon_new <- neon_new[-c(2)]
#3. rbind with general height data and determine equations ####
heights_sub <- heights[c(5,9,26,27)]
heights_all <- rbind(heights_sub, neon_new)
View(heights_all)
#check which ones need dbh from previous census because they died (should be 0)
check <- heights_all[is.na(heights_all$dbh) | heights_all$dbh ==0, ]
#4. make regression equations ####
#bring in list of cored species we're using
neil_list <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
paper_heights <- heights_all[heights_all$sp %in% neil_sp, ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
unique(heights_all$sp) #shows all sp that we have height data for
unique(paper_heights$sp) #shows the cored sp that we have data for
paper_heights <- paper_heights[!paper_heights$sp %in% c("fram", "juni", "quve"), ] #juni, fram, and quve have <5 measurements has only one measure
source_gist("524eade46135f6348140")
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for all species together
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal()
View(paper_heights)
paper_heights[is.na(paper_heights$dbh_year), ]
paper_heights[is.na(paper_heights$height.m), ]
paper_heights[is.na(paper_heights$dbh_regr.cm), ]
View(heights)
meh <- paper_heights[is.na(paper_heights$dbh_regr.cm), ]
View(meh)
View(heights_sub)
test <- heights[is.na(heights$DBH.2008.cm) & is.na(heights$DBH.2013.cm) & is.na(heights$DBH.2018.cm), ]
test <- heights[is.na(heights$DBH.2008.cm) & is.na(heights$DBH.2013.cm) is.na(heights$DBH.TLS.2015.cm) & & is.na(heights$DBH.2018.cm), ]
test <- heights[is.na(heights$DBH.2008.cm) & is.na(heights$DBH.2013.cm) is.na(heights$DBH.TLS.2015.cm) & is.na(heights$DBH.2018.cm), ]
test <- heights[is.na(heights$DBH.2008.cm) & is.na(heights$DBH.2013.cm) & is.na(heights$DBH.TLS.2015.cm) & is.na(heights$DBH.2018.cm), ]
View(test)
library(data.table)
library(RCurl)
library(ggplot2)
library(devtools)
library(stringr)
#1. prepare SCBI data ####
heights <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_heights/SCBI_tree_heights.csv"), stringsAsFactors = FALSE)
dbh_2008 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem1.csv"), stringsAsFactors = FALSE)
dbh_2008$dbh.cm <- as.numeric(dbh_2008$dbh)/10 #cm
dbh_2013 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem2.csv"), stringsAsFactors = FALSE)
dbh_2013$dbh.cm <- dbh_2013$dbh/10 #cm
dbh_2018 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
dbh_2018$dbh.cm <- as.numeric(dbh_2018$dbh)/10 #cm
heights$dbh_regr.cm <- paste0(heights$DBH.2008.cm, heights$DBH.2013.cm, heights$DBH.TLS.2015.cm, heights$DBH.2018.cm)
heights$dbh_regr.cm <- gsub("NA", "", heights$dbh_regr.cm)
heights$dbh_regr.cm <- as.numeric(heights$dbh_regr.cm)
meh <- heights[is.na(heights$dbh_regr.cm), ]
View(meh)
heights$dbh_regr.cm <- paste0(heights$DBH.2008.cm, heights$DBH.2013.cm, heights$DBH.TLS.2015.cm, heights$DBH.2018.cm, heights$DBH.NEON.cm)
heights$dbh_regr.cm <- gsub("NA", "", heights$dbh_regr.cm)
heights$dbh_regr.cm <- as.numeric(heights$dbh_regr.cm)
meh <- heights[is.na(heights$dbh_regr.cm), ]
heights$dbh_year <- NA
unique(heights$height.year)
grepl("\\d{4}", heights$height.year)
heights$height.year[grepl("\\d{4}", heights$height.year)]
heights$height.year <- as.character(heights$height.year)
heights$dbh_year <- heights$height.year[grepl("\\d{4}", heights$height.year)]
heights$height.year[grepl("\\d{4}", heights$height.year)]
heights$height.year[grepl("^\\d{4}", heights$height.year)]
heights$height.year[grepl("^\\d{3}", heights$height.year)]
heights$height.year[grepl("^[[:digit:]]{3}", heights$height.year)]
library(stringi)
stringr::str_extract(heights$height.year, "^\\d{4}")
heights$dbh_year <- as.numeric(stringr::str_extract(heights$height.year, "^\\d{4}"))
dup <- heights$stemID[duplicated(heights$stemID)]
heights_dup <- heights[heights$stemID %in% dup, ]
heights_nodup <- heights[!heights$stemID %in% dup, ]
heights_recent <- NULL
heights_recent <- NULL
for (i in seq(along=unique(heights_dup$stemID))){
sub <- heights_dup[heights_dup$stemID %in% unique(heights_dup$stemID)[[i]], ]
sub <- sub[sub$height.year == max(sub$height.year), ]
heights_recent <- rbind(heights_recent, sub)
}
heights_all <- rbind(heights_nodup, heights_recent)
View(heights_all)
heights_all <- heights_all[c(1:5,7,9,16:17,26:27)]
## sine bias ####
#we are not applying a fix for sine bias because a number of papers that used the sine method also did not apply any corrections. Instead, they (sometimes) acknowledged the error associated with it.
#2. get neon height data ####
file_path <- file.path("data/heights/NEON/neon_heights/")
dirs_map <- dir("data/heights/NEON/neon_heights", pattern="mapping_and_tagging.*$")
dirs_ht <- dir("data/heights/NEON/neon_heights", pattern="neon_ht.*$")
neon_all <- NULL
for (i in seq(along=dirs_map)){
for (j in seq(along=dirs_ht)){
if (i == j){
neon_id <- read.csv(paste(file_path, dirs_map[[i]], sep="//"), stringsAsFactors = FALSE)
neon_ht <- read.csv(paste(file_path, dirs_ht[[j]], sep="//"), stringsAsFactors = FALSE)
id <- neon_id$individualID
neon_id <- neon_id[c("individualID", "taxonID", "scientificName")]
neon_ht$sp <- neon_id$taxonID[match(neon_ht$individualID, neon_id$individualID)]
neon_ht <- neon_ht[c("plotID", "sp", "individualID", "plantStatus", "stemDiameter", "measurementHeight", "height")]
neon_ht$sp <- tolower(neon_ht$sp)
neon_ht$dbh_year <- str_extract(dirs_ht[[j]], "[[:digit:]]*-[[:digit:]]*")
neon_ht$dbh_year <- gsub("-", ".", neon_ht$dbh_year)
setnames(neon_ht, old=c("stemDiameter", "measurementHeight", "height"), new=c("dbh_regr.cm", "dbh_height.cm", "height.m"))
#exclude unknown id (2plant, 2plant-h), vines/shrubs (syor, vitis, ceor7, tora2, paqu2, romu, loma6, loja, rual, ruph, beth, libe), and non-sp-specific (carya, querc, fraxi, ulmus, vibur, pyrus, diosp, rubus)
neon_ht <- neon_ht[!(neon_ht$sp %in% c("2plant", "2plant-h", "syor", "vitis", "ceor7", "tora2", "paqu2", "romu", "loma6", "loja", "rual", "ruph", "beth", "libe3", "carya", "querc", "fraxi", "ulmus", "vibur", "pyrus", "diosp", "rubus")), ]
neon_ht$sp <- ifelse(neon_ht$sp == "asimi", "astr",
ifelse(neon_ht$sp == "fram2", "fram",
ifelse(neon_ht$sp == "cagl8", "cagl",
ifelse(neon_ht$sp == "caov3", "caovl",
ifelse(neon_ht$sp == "sassa", "saal",
ifelse(neon_ht$sp == "cato6", "cato",
ifelse(neon_ht$sp == "cecac", "ceca",
ifelse(neon_ht$sp == "caco15", "caco",
ifelse(neon_ht$sp == "acnen", "acne",
ifelse(neon_ht$sp == "prses", "prse",
ifelse(neon_ht$sp == "qumo4", "qupr",
ifelse(neon_ht$sp == "pivi2", "pivi",
ifelse(neon_ht$sp == "cofl2", "cofl",
ifelse(neon_ht$sp == "pato2", "pato", neon_ht$sp))))))))))))))
#filter out saplings and weird dbh
neon_ht <- neon_ht[!(is.na(neon_ht$dbh_height.cm)) & !(neon_ht$dbh_height.cm <110) & !(neon_ht$dbh_height.cm >150), ]
neon_ht <- neon_ht[grepl("Live", neon_ht$plantStatus), ]
neon_ht <- neon_ht[neon_ht$individualID %in% unique(neon_ht$individualID[neon_ht$dbh_year == max(neon_ht$dbh_year)]), ]
#rbind to have full dataset ####
neon_ht_sub <- neon_ht[c(2,3,5,7,8)]
neon_all <- rbind(neon_all, neon_ht_sub)
}
}
}
neon_all <- neon_all[complete.cases(neon_all), ]
neon_all$dbh_year <- as.numeric(neon_all$dbh_year)
#get only one measurement per tree (most recent)
neon_new <- NULL
for (i in seq(along=neon_all$individualID)){
poss <- neon_all[neon_all$individualID == neon_all$individualID[[i]], ]
poss <- poss[poss$dbh_year == max(poss$dbh_year), ]
neon_new <- rbind(neon_new, poss)
}
#get rid of duplicates again (unsure why the loop does this)
neon_new <- neon_new[!duplicated(neon_new$individualID), ]
#get rid of data outliers (impossible height or dbh given the other)
neon_new <- neon_new[!neon_new$individualID %in% c("NEON.PLA.D02.SCBI.03428", "NEON.PLA.D02.SCBI.02787"), ]
#remove individualID so can rbind below
neon_new <- neon_new[-c(2)]
View(neon_new)
neon_new$dbh_year <- as.numeric(stringr::str_extract(neon_new$dbh_year, "^\\d{4}"))
#3. rbind with general height data and determine equations ####
heights_sub <- heights[c(5,9,26,27)]
heights_all <- rbind(heights_sub, neon_new)
#check which ones need dbh from previous census because they died (should be 0)
check <- heights_all[is.na(heights_all$dbh) | heights_all$dbh ==0, ]
meh <- heights_all[is.na(heights_all), ]
#4. make regression equations ####
#bring in list of cored species we're using
neil_list <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
paper_heights <- heights_all[heights_all$sp %in% neil_sp, ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
unique(heights_all$sp) #shows all sp that we have height data for
unique(paper_heights$sp) #shows the cored sp that we have data for
paper_heights <- paper_heights[!paper_heights$sp %in% c("fram", "juni", "quve"), ] #juni, fram, and quve have <5 measurements has only one measure
source_gist("524eade46135f6348140")
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for all species together
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1.7,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal()
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.05, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.6, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.55, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.7, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights, aes(x = log(dbh_regr.cm), y = log(height.m), label = log(height.m))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=0,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
regr <- data.frame("Species" = c("Carya cordiformis", "Carya glabra", "Carya ovalis", "Carya tomentosa", "Fagus grandifolia", "Liriodendron tulipifera", "Quercus alba", "Quercus prinus", "Quercus rubra", "all"),
"sp" = c("caco", "cagl", "caovl", "cato", "fagr", "litu", "qual", "qupr", "quru", "all"),
"Equations" = c("0.332+0.808*x", #caco
"0.685+0.691*x", #cagl
"0.533+0.741*x", #caovl
"0.726+0.713*x", #cato
"0.708+0.662*x", #fagr
"1.33+0.52*x", #litu
"0.74+0.645*x", #qual
"0.41+0.757*x", #qupr
"1+0.574*x", #quru
"0.839+0.642*x"), #all
"r^2" = c(0.874, 0.841, 0.924,
0.897, 0.857, 0.771,
0.719,0.886, 0.755,
0.857))
write.csv(regr, "manuscript/tables_figures/height_regression.csv", row.names=FALSE)
regr <- data.frame("Species" = c("Carya cordiformis", "Carya glabra", "Carya ovalis", "Carya tomentosa", "Fagus grandifolia", "Liriodendron tulipifera", "Quercus alba", "Quercus prinus", "Quercus rubra", "all"),
"sp" = c("caco", "cagl", "caovl", "cato", "fagr", "litu", "qual", "qupr", "quru", "all"),
"Equations" = c("0.332+0.808*x", #caco
"0.685+0.691*x", #cagl
"0.533+0.741*x", #caovl
"0.726+0.713*x", #cato
"0.708+0.662*x", #fagr
"1.33+0.52*x", #litu
"0.74+0.645*x", #qual
"0.41+0.757*x", #qupr
"1.00+0.574*x", #quru
"0.839+0.642*x"), #all
"r^2" = c(0.874, 0.841, 0.924,
0.897, 0.857, 0.771,
0.719,0.886, 0.755,
0.857))
write.csv(regr, "manuscript/tables_figures/tableS2_height_regression.csv", row.names=FALSE)
