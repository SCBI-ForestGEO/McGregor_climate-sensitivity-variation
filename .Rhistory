# bark <- data.frame(
#   "sp" = c("acru", "fagr", "litu", "nysy", "caco", "cagl", "caovl", "cato", "fram", "juni", "qual", "qupr", "quru", "quve", "ulru"),
#   "bark_thick_ln" = c(-2.564, 0, -0.659, -0.611, -1.917, -0.495, -2.504, -0.945, 0.318, -0.293, -1.231, -0.647, -0.789, 1.5, 1.133),
#   "intercept" = c(0.599, 0, 0.425, 0.413, 0.503, 0.316, 0.703, 0.396, 0.295, 0.385, 0.526, 0.423, 0.341, 0.053, -0.057))
#
# bark$bark_thick <- ifelse(bark$bark_thick_ln != 0, exp(bark$bark_thick_ln), bark$bark_thick_ln)
#
# bark$bark_thick <- exp(bark$bark_thick_ln)
#
# dbh$bark_thick <- bark$bark_thick[match(dbh$sp, bark$sp)]
# dbh$intercept <- bark$intercept[match(dbh$sp, bark$sp)]
#
# #the main equation is based on ring widths. We have determined the equation to be
# # rw(pointer_year) <- 0.5*dbh2013 - bark_thick*(dbh2013^intercept) - sum(rw(pointer_year):rw(end)). The first part of the equation is here. Summing the pointer years happens with the "q" df below in the loop.
# dbh$rw_prelim <- (0.5*dbh$dbh2013) - (dbh$bark_thick*(dbh$dbh2013^dbh$intercept))
#
#
# dbh$dbh_old.mm <- "0" #in prep for below
# dbh$dbh_old.mm <- as.numeric(dbh$dbh_old.mm)
#
# for (i in seq(along=widths)){
#   df <- widths[[i]] #the list "widths" comes from #4a-4b
#   colnames(df) <- gsub("A", "", colnames(df)) #remove "A"
#   colnames(df) <- gsub("^0", "", colnames(df)) #remove leading 0
#
#   cols <- colnames(df) #define cols for below
#   colnames(df) <- gsub("^", "x", colnames(df)) #add "x" to make calling colnames below feasible
#
#   for (j in seq(along=cols)){
#     for (k in seq(along=colnames(df))){
#       ring_ind <- cols[[j]]
#       ring_col <- colnames(df)[[k]]
#
#       if(j==k){
#         #the output of this loop is 3 separate columns for each year's old dbh, hence why it is set to q as a dataframe before being combined below. Pointer_years_simple comes from #4d.
#         q <- data.frame(sapply(pointer_years_simple, function(x){
#           rw <- df[rownames(df)>=x, ]
#           ifelse(dbh$year == x & dbh$tree == ring_ind,
#                  dbh$rw_prelim - sum(rw[, ring_col], na.rm=TRUE), 0)
#         }))
#
#         q$dbh_old.mm <- q[,1] +q[,2] + q[,3] #add columns together
#         # q$dbh_old.mm <- q[,1] +q[,2] + q[,3] + q[,4]
#         dbh$dbh_old.mm <- dbh$dbh_old.mm + q$dbh_old.mm #combine with dbh
#       }
#     }
#   }
# }
#
# # check <- dbh[dbh$dbh_old.mm == 0, ] #check if any tree was missed
#
# trees_all$dbh_old.mm <- dbh$dbh_old.mm
# trees_all$dbh_old.mm <- ifelse(trees_all$dbh_old.mm < 0, 0, trees_all$dbh_old.mm)
# trees_all$dbh_old.mm <- ifelse(trees_all$dbh_old.mm > 0, trees_all$dbh_old.mm/10, trees_all$dbh_old.mm)
# trees_all$dbh_ln <- ifelse(trees_all$dbh_old.mm == 0, NA, log(trees_all$dbh_old.mm))
###new method ####
bark <- read.csv("data/traits/SCBI_bark_depth.csv")
# bark <- bark[bark$species %in% sp_can | bark$species %in% sp_subcan, ]
bark <- bark[bark$species %in% unique(trees_all$sp), ]
#1. Calculate diameter_nobark for 2008 = DBH.mm.2008-2*bark.depth.mm
bark$diam_nobark_2008.mm <- bark$DBH.mm.2008 - 2*bark$bark.depth.mm
#2. log-transform both diam_nobark_2008 (x) and bark.depth.mm (y)
#3. Fit a linear model, and use model to predict log(bark.depth.mm)
source_gist("524eade46135f6348140")
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
#no total regression equation at bottom because all species are accounted for in dataset.
bark$predict_barkthick.ln.mm <- NA
bark$predict_barkthick.ln.mm <-
ifelse(bark$species == "caco", -1.56+0.416*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "cagl", -0.393+0.268*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "caovl", -2.18+0.651*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "cato", -0.477+0.301*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "fram", 0.418+0.268*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "juni", 0.346+0.279*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "litu", -1.14+0.463*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "qual", -2.09+0.637*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "qupr", -1.31+0.528*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "quru", -0.593+0.292*log(bark$diam_nobark_2008.mm),
ifelse(bark$species == "quve", 0.245+0.219*log(bark$diam_nobark_2008.mm),
bark$predict_barkthick.ln)))))))))))
#4. Take exponent of bark.depth.mm and make sure predicted values look good.
bark$predict_barkthick.mm <- exp(bark$predict_barkthick.ln.mm)
range(bark$predict_barkthick.mm - bark$bark.depth.mm)
View(bark)
##set up dbh dataframe
dbh <- trees_all[, c(1:4)]
scbi.stem1 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem1.csv"), stringsAsFactors = FALSE)
unique(bark$species)
scbi.stem1$dbh <- as.numeric(scbi.stem1$dbh)
##set up dbh dataframe
dbh <- trees_all[, c(1:4)]
scbi.stem1 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem1.csv"), stringsAsFactors = FALSE)
scbi.stem1$dbh <- as.numeric(scbi.stem1$dbh)
dbh$dbh2008.mm <- scbi.stem1$dbh[match(dbh$tree, scbi.stem1$tag)]
mean_bark <- aggregate(bark$bark.depth.mm, by=list(bark$species), mean) #mm
View(mean_bark)
colnames(mean_bark) <- c("sp", "mean_bark_2008.mm")
dbh$mean_bark_2008.mm <- ifelse(dbh$sp %in% mean_bark$sp, mean_bark$mean_bark_2008.mm[match(dbh$sp, mean_bark$sp)], mean(bark$bark.depth.mm))
dbh$mean_bark_2008.mm <- round(dbh$mean_bark_2008.mm, 2)
##define this column before loop
dbh$diam_nobark_old.mm <- 0
df <- rings #the original file read-in from read.rwl
colnames(df) <- gsub("A", "", colnames(df)) #remove "A"
colnames(df) <- gsub("^0", "", colnames(df)) #remove leading 0
cols <- colnames(df) #define cols for below
colnames(df) <- gsub("^", "x", colnames(df)) #add "x" to make calling colnames below feasible
for (j in seq(along=cols)){
for (k in seq(along=colnames(df))){
ring_ind <- cols[[j]]
ring_col <- colnames(df)[[k]]
if(j==k){
#the output of this loop is 3 separate columns for each year's old dbh, hence why it is set to q as a dataframe before being combined below. Pointer_years_simple comes from #4d.
q <- data.frame(sapply(pointer_years_simple, function(x){
rw <- df[rownames(df)>=x, ]
ifelse(dbh$year == x & dbh$tree == ring_ind,
dbh$dbh2008.mm - 2*(dbh$mean_bark_2008.mm) - sum(rw[rownames(rw) %in% c(x:2008), ring_col], na.rm=TRUE), 0)
}))
q$diam_nobark_old.mm <- q[,1] +q[,2] + q[,3] #add columns together
# q$dbh_old.mm <- q[,1] +q[,2] + q[,3] + q[,4]
dbh$diam_nobark_old.mm <- dbh$diam_nobark_old.mm + q$diam_nobark_old.mm #combine with dbh (it's the same order of rows) #mm
}
}
}
#the full equation at the bottom is the regression equation for all these species put together. "fagr" is given a bark thickness of 0 because it is negligble
#these equations are the same as above in #3 of this code section
dbh$bark_thick_old.ln.mm <- NA
dbh$bark_thick_old.ln.mm <-
ifelse(dbh$sp == "caco", -1.56+0.416*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cagl", -0.393+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "caovl", -2.18+0.651*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cato", -0.477+0.301*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fram", 0.418+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "juni", 0.346+0.279*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "litu", -1.14+0.463*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qual", -2.09+0.637*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qupr", -1.31+0.528*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quru", -0.593+0.292*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quve", 0.245+0.219*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fagr", 0,
-1.01+0.213*log(dbh$diam_nobark_old.mm)))))))))))))
warnings()
unique(dbh$sp)
View(dbh)
meh <- dbh[is.nan(dbh$bark_thick_old.ln.mm), ]
View(meh)
#the full equation at the bottom is the regression equation for all these species put together. "fagr" is given a bark thickness of 0 because it is negligble
#these equations are the same as above in #3 of this code section
dbh$bark_thick_old.ln.mm <- NA
dbh$bark_thick_old.ln.mm <-
ifelse(dbh$sp == "caco", -1.56+0.416*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cagl", -0.393+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "caovl", -2.18+0.651*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cato", -0.477+0.301*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fram", 0.418+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "juni", 0.346+0.279*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "litu", -1.14+0.463*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qual", -2.09+0.637*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qupr", -1.31+0.528*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quru", -0.593+0.292*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quve", 0.245+0.219*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fagr", 0))))))))))))
dbh$bark_thick_old.ln.mm <-
ifelse(dbh$sp == "caco", -1.56+0.416*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cagl", -0.393+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "caovl", -2.18+0.651*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cato", -0.477+0.301*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fram", 0.418+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "juni", 0.346+0.279*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "litu", -1.14+0.463*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qual", -2.09+0.637*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qupr", -1.31+0.528*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quru", -0.593+0.292*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quve", 0.245+0.219*log(dbh$diam_nobark_old.mm),
dbh$sp == "fagr", 0)))))))))))
#the full equation at the bottom is the regression equation for all these species put together. "fagr" is given a bark thickness of 0 because it is negligble
#these equations are the same as above in #3 of this code section
dbh$bark_thick_old.ln.mm <- NA
dbh$bark_thick_old.ln.mm <-
ifelse(dbh$sp == "caco", -1.56+0.416*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cagl", -0.393+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "caovl", -2.18+0.651*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "cato", -0.477+0.301*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "fram", 0.418+0.268*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "juni", 0.346+0.279*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "litu", -1.14+0.463*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qual", -2.09+0.637*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "qupr", -1.31+0.528*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quru", -0.593+0.292*log(dbh$diam_nobark_old.mm),
ifelse(dbh$sp == "quve", 0.245+0.219*log(dbh$diam_nobark_old.mm),
0)))))))))))
warnings()
View(dbh)
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=0.1, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=-1, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=1.5, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=1.16, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
ggplot(data = bark, aes(x = log(diam_nobark_2008.mm), y = log(bark.depth.mm))) +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-0.5,parse=TRUE) +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(species))
################################################################################
#5 Distribution of resistance values and time series (Figure 1) ####
library(ggplot2)
library(png)
library(grid)
library(gridExtra)
library(cowplot)
trees_all_sub <- read.csv("manuscript/tables_figures/trees_all_sub.csv")
trees_all_sub$year <- as.character(trees_all_sub$year)
View(trees_all_sub)
library(data.table)
test <- as.data.table(trees_all_sub)
test[,.(vals = mean(resist.value)), by=.(year)]
test[,.(reduct = length(resist.value<=0.7, growth=length(resist.value>1))), by=.(year)]
test[,.(reduct = length(resist.value<=0.7), growth=length(resist.value>1)), by=.(year)]
View(test)
length(resist.value<=0.7)
test[,.(reduct = length(resist.value<=0.7)/nrow(test),
growth=length(resist.value>1)/nrow(test)), by=.(year)]
test66 <- test[year==1966, ]
length(test66[resist.value <=0.7, ])
length(resist.value<=0.7)
test[resist.value<=0.7,.(reduct = length(resist.value)/nrow(test), by=.(year)]
growth=length(resist.value>1)/nrow(test)), by=.(year)]
test[resist.value<=0.7,.(reduct = length(resist.value)/nrow(test)), by=.(year)]
15/513
meh <- test[resist.value <=0.7, ]
meh66 <- meh[year == 1966, ]
151/513
151/1623
test[resist.value<=0.7,.(reduct = length(resist.value)/nrow()), by=.(year)]
test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)]
test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)
][,.(reduct/length(resist.value)), by=.(unique(year))]
test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)
]
test_reduct <- test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)
][, .(year=year, reduct=reduct/nrow(test[year==year, ]))]
View(test_reduct)
# test_reduct <-
test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)
][, .(year=year, reduct=reduct/nrow(test[year==year, ]))]
View(meh66)
151/513
test_reduct <-
test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)]
by_year <- test[, .(total=length(resist.value)), by=.(year)]
View(by_year)
test_reduct$total <- by_year$total
View(test_reduct)
test_reduct$perc <- test_reduct$reduct/test_reduct$total
View(test_reduct)
test_reduct <- test[resist.value>1,.(reduct = length(resist.value)), by=.(year)]
test_reduct$total <- by_year$total
test_reduct$perc <- test_reduct$reduct/test_reduct$total
View(test_reduct)
test_reduct <- test[resist.value<=0.7,.(reduct = length(resist.value)), by=.(year)]
by_year <- test[, .(total=length(resist.value)), by=.(year)]
test_reduct$total <- by_year$total
test_reduct$perc <- test_reduct$reduct/test_reduct$total
test_growth <- test[resist.value>1,.(reduct = length(resist.value)), by=.(year)]
test_growth$total <- by_year$total
test_growth$perc <- test_growth$growth/test_growth$total
View(test_growth)
test_growth <- test[resist.value>1,.(growth = length(resist.value)), by=.(year)]
test_growth$total <- by_year$total
test_growth$perc <- test_growth$growth/test_growth$total
test_full <- merge(test_reduct, test_growth)
test_reduct <- test[resist.value<=0.7,.(reduct_re = length(resist.value)), by=.(year)]
by_year <- test[, .(total=length(resist.value)), by=.(year)]
test_reduct$total_re <- by_year$total
test_reduct$perc_re <- test_reduct$reduct/test_reduct$total_re
test_growth <- test[resist.value>1,.(growth = length(resist.value)), by=.(year)]
test_growth$total_gr <- by_year$total_re
test_growth$perc_gr <- test_growth$growth/test_growth$total_gr
test_growth <- test[resist.value>1,.(growth = length(resist.value)), by=.(year)]
test_growth$total_gr <- by_year$total
test_growth$perc_gr <- test_growth$growth/test_growth$total_gr
test_full <- merge(test_reduct, test_growth)
View(test_full)
######################################################
# Purpose: Create conglomerate graphs for McGregor et al 2019
# Developed by: Ian McGregor - mcgregori@si.edu
# R version 3.5.3 - First created July 2019
######################################################
library(ggplot2)
library(RCurl) #2
library(tidyr) #2
library(grid) #2
library(gridExtra) #2
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
current_ht <- trees_all[!duplicated(trees_all$tree), ]
current_ht$year <- 2018
current_ht <- current_ht[,c(1:4,13:15,17:19)]
current_ht$dbh_old.mm <- scbi.stem3$dbh[match(current_ht$tree, scbi.stem3$tag)]
current_ht$dbh_old.cm <- current_ht$dbh_old.mm/10
current_ht$dbh.ln.cm <- log(current_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
current_ht$height.ln.m <-
ifelse(current_ht$sp == "caco", (0.348+0.808*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cagl", (0.681+0.704*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "caovl", (0.621+0.722*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cato", (0.776+0.701*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fagr", (0.708+0.662*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fram", (0.715+0.619*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "juni", (1.22+0.49*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "litu", (1.32+0.524*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qual", (1.14+0.548*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qupr", (0.44+0.751*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quru", (1.17+0.533*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quve", (0.864+0.585*current_ht$dbh.ln.cm),
(0.791+0.645*current_ht$dbh.ln.cm)))))))))))))
current_ht$height.m <- exp(current_ht$height.ln.m)
current_ht <- current_ht[order(current_ht$tree, current_ht$year), ]
#graphing height by crown position (for paper)
current_ht <- current_ht[!is.na(current_ht$position_all), ]
current_ht$position_all_abb <- substring(current_ht$position_all, 0, 1)
current_ht$position_all_abb <- toupper(current_ht$position_all_abb)
current_ht$position_all_abb <- factor(current_ht$position_all_abb, levels = c("D", "C", "I", "S"))
heights <-
ggplot(data = current_ht, aes(x = position_all_abb, y = height.m, group = position_all)) +
# aes(x=position_all, y=height.m, fill=year) +
geom_boxplot() +
xlab("Crown position") +
ylab("Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_minimal() +
theme(axis.text = element_text(size=12)) +
theme(axis.title = element_text(size=14))
heights
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi18_ht <- scbi.stem3
scbi18_ht <- scbi18_ht[scbi18_ht$dbh>=100, ]
scbi18_ht <- scbi18_ht[,c(2:5,11,14:15)]
scbi18_ht$dbh_old.cm <- scbi18_ht$dbh/10
scbi18_ht$dbh.ln.cm <- log(scbi18_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
scbi18_ht$height.ln.m <-
ifelse(scbi18_ht$sp == "caco", (0.348+0.808*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cagl", (0.681+0.704*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "caovl", (0.621+0.722*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cato", (0.776+0.701*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fagr", (0.708+0.662*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fram", (0.715+0.619*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "juni", (1.22+0.49*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "litu", (1.32+0.524*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qual", (1.14+0.548*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qupr", (0.44+0.751*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quru", (1.17+0.533*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quve", (0.864+0.585*scbi18_ht$dbh.ln.cm),
(0.791+0.645*scbi18_ht$dbh.ln.cm)))))))))))))
scbi18_ht$height.m <- exp(scbi18_ht$height.ln.m) #used below in #4
View(scbi18_ht)
View(current_ht)
##2c. combine heights to make plot with all years
current_ht_sub <- current_ht[,c("year", "position_all_abb", "height.m")]
View(current_ht_sub)
View(scbi18_ht)
View(scbi.stem3)
#these are the crown positions with height for all other trees from 2018
dend_core_full <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
View(dend_core_full)
View(current_ht_sub)
scbi18_ht$position_all_abb <- dend_core_full$crown.position[match(scbi18_ht$stemID, dend_core_full$stemID)]
View(scbi18_ht)
scbi18_ht_sub <- scbi18_ht[!is.na(scbi18_ht$position_all_abb), ]
View(scbi18_ht_sub)
scbi18_ht_sub$year <- "2018"
sbci18_ht_sub <- scbi18_ht_sub[,c("year", "position_all_abb", "height.m")]
View(scbi18_ht_sub)
sbci18_ht_sub <- scbi18_ht_sub[,c("year", "position_all_abb", "height.m")]
scbi18_ht_sub <- scbi18_ht_sub[,c("year", "position_all_abb", "height.m")]
View(current_ht_sub)
esquisse::esqiusser()
esquisse::esquisser()
ggplot(scbi18_ht_sub, aes(position_all_abb, height.m)) +
geom_boxplot()
ggplot(current_ht_sub, aes(position_all_abb, height.m)) +
geom_boxplot()
View(trees_all)
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("year", "position_all_abb", "height.m")]
rbind(trees_all_plot, current_ht_sub)
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
View(heights_allplot)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
ggplot(current_ht_sub, aes(position_all_abb, height.m)) +
geom_boxplot(aes(color=year))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(current_ht_sub, aes(position_all_abb, height.m)) +
geom_boxplot(aes(color=year))
View(heights_allplot)
ggplot(current_ht_sub, aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year))
ggplot(heights_allplot, aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year))
heights_allplot <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(heights_allplot, aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year))
png("manuscript/tables_figures/height_plots.png")
layout(matrix(1:2, nrow=1))
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with only trees in analysis")
#NOTE ...using scbi18_ht_sub
##scbi18_ht_sub = log-derived 2018 heights of all trees in census (but ofc, only those we have crown position data for)
heights_allplot <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with all trees we have crown position data for")
dev.off()
layout(matrix(1:1, nrow=1))
png("manuscript/tables_figures/height_plots.png")
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with only trees in analysis")
#NOTE ...using scbi18_ht_sub
##scbi18_ht_sub = log-derived 2018 heights of all trees in census (but ofc, only those we have crown position data for)
heights_allplot <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with all trees we have crown position data for")
dev.off()
png("manuscript/tables_figures/height_plot_analysis.png")
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with only trees in analysis")
dev.off()
png("manuscript/tables_figures/height_plot_all.png")
#NOTE ...using scbi18_ht_sub
##scbi18_ht_sub = log-derived 2018 heights of all trees in census (but ofc, only those we have crown position data for)
heights_allplot <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with all trees we have crown position data for")
dev.off()
