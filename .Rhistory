setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
}
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
SAAT_plot
wind_plot
biotemp_plot
RH_plot
SR_plot
##make this below into loop
#determine threshold for sunny/cloudy day ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_difRad = mean(difRadMean, na.rm=TRUE), mean_dirRad = mean(dirRadMean, na.rm=TRUE))
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_sun = sum(sunPres, na.rm=TRUE))
q1 <- q[c(1,2)]
q1$type <- "difRad"
setnames(q1, old="mean_difRad", new="measure")
q2 <- q[c(1,3)]
q2$type <- "dirRad"
setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
}
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
SAAT_plot
wind_plot
biotemp_plot
RH_plot
SR_plot
##make this below into loop
#determine threshold for sunny/cloudy day ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_difRad = mean(difRadMean, na.rm=TRUE), mean_dirRad = mean(dirRadMean, na.rm=TRUE))
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_sun = sum(sunPres, na.rm=TRUE))
q1 <- q[c(1,2)]
q1$type <- "difRad"
setnames(q1, old="mean_difRad", new="measure")
q2 <- q[c(1,3)]
q2$type <- "dirRad"
setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
library(neonUtilities)
library(plotly)
library(lubridate)
library(dplyr)
library(data.table)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"))
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
dp[] <- lapply(dp, as.character)
i=1
dp$value <- as.character(dp$value)
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
}
#this works
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#this doesn't
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE))
View(neon_data_sub)
#this doesn't
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[, value], na.rm=TRUE))
tempSingleMean
#this works
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#this works
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean("tempSingleMean", na.rm=TRUE))
neon_data_sub
#this works
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get("tempSingleMean"), na.rm=TRUE))
#this works
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get(value), na.rm=TRUE))
?get
#get mean of values per month per verticalPosition
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get(value), na.rm=TRUE))
View(data_analy)
#this loop for some reason isn't producing plotly graphs that will work, but everything else runs smoothly
neon_vars <- list()
#want to preserve the dfs, so put them in a list, then make a generic new_df
neon_vars[[i]] <- neon_data_sub
names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
p <- ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
View(data_analy)
data_analy[3]
p <- ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = data_analy[3], color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = data_analy[3], color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
p <- ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = test, color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = test, color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
View(dp)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"),
"ylabs" = c("Mean Air Temperature (C)", "Mean Windspeed (m/s)", "Mean Infrared Temperature", "Relative Humidity", "Mean shortwave downward radiation (W/m2)"))
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
dp[] <- lapply(dp, as.character)
dp$ylabs[[i]]
p <- ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = test, color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = test, color = month_f)) +
labs(x = "Height (m)", y = dp$ylabs[[i]]) +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
#graph in split sections
assign(paste0(dp$data[[i]], "_plot"),
p + facet_grid(.~month_f))
p
library(data.table)
library(neonUtilities)
library(plotly)
library(lubridate)
library(dplyr)
library(data.table)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"),
"ylabs" = c("Mean Air Temperature (C)", "Mean Windspeed (m/s)", "Mean Infrared Temperature", "Relative Humidity", "Mean shortwave downward radiation (W/m2)"))
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
dp[] <- lapply(dp, as.character)
#this loop for some reason isn't producing plotly graphs that will work, but everything else runs smoothly
neon_vars <- list()
for (i in seq(along=1:4)){ #make 1:5 if using radiation (cloud vs sun threshold)
dp$value <- as.character(dp$value)
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
}
#want to preserve the dfs, so put them in a list, then make a generic new_df
neon_vars[[i]] <- neon_data_sub
names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
#get mean of values per month per verticalPosition
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get(value), na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
assign(paste0(dp$data[[i]], "_plot"),
ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = test, color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = test, color = month_f)) +
labs(x = "Height (m)", y = dp$ylabs[[i]]) +
theme_grey()
)
# p + facet_grid(.~month_f))
}
data_analy <- NULL
#get mean of values per month per verticalPosition
new_df <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(get(value) = mean(get(value), na.rm=TRUE))
#get mean of values per month per verticalPosition
new_df <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(dp$value[[i]] = mean(get(value), na.rm=TRUE))
#get mean of values per month per verticalPosition
new_df <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get(value), na.rm=TRUE))
setnames(new_df, old = "test", new = get(value))
setnames(new_df, old = "test", new = dp$value[[i]])
View(new_df)
View(neon_vars)
?facet_wrap
library(gridExtra)
grid.arrange(SAAT_plot + wind_plot + RH_plot + biotemp_plot, nrow=2)
wind_plot
grid.arrange(SAAT_plot + RH_plot + biotemp_plot, nrow=2)
?grid.arrange
grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2)
library(neonUtilities)
library(plotly)
library(lubridate)
library(dplyr)
library(data.table)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"),
"ylabs" = c("Mean Air Temperature (C)", "Mean Windspeed (m/s)", "Mean Infrared Biological Temperature (C)", "Relative Humidity", "Mean shortwave downward radiation (W/m2)"))
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
dp[] <- lapply(dp, as.character)
#this loop for some reason isn't producing plotly graphs that will work, but everything else runs smoothly
neon_vars <- list()
for (i in seq(along=1:4)){ #make 1:5 if using radiation (cloud vs sun threshold)
dp$value <- as.character(dp$value)
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
}
#want to preserve the dfs, so put them in a list, then make a generic new_df
neon_vars[[i]] <- neon_data_sub
names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
#get mean of values per month per verticalPosition
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(get(value), na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
assign(paste0(dp$data[[i]], "_plot"),
ggplot(data_analy) +
geom_line(aes(x = verticalPosition, y = test, color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = test, color = month_f)) +
labs(x = "Height (m)", y = dp$ylabs[[i]]) +
theme_grey()
)
}
#arrange all graphs together
grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2)
library(gridExtra)
#arrange all graphs together
grid.arrange(SAAT_plot, wind_plot, RH_plot, biotemp_plot, nrow=2)
library(pointRes)
library(dplR)
library(data.table)
library(tools)
library(dplyr)
library(reshape2)
##4a. canopy ####
dirs_can <- dir("data/core_files/canopy_cores", pattern = "_canopy.rwl")
dirs_can <- dirs_can[!dirs_can %in% c("frni_canopy.rwl", "frni_drop_canopy.rwl", "caco_drop_canopy.rwl")]
sp_can <- gsub("_drop_canopy.rwl", "", dirs_can)
canopy <- list()
widths_can <- list()
i=1
j=1
file <- dirs_can[[i]]
rings <- read.rwl(paste0("data/core_files/canopy_cores/", file)) #read in rwl file
library(dplR)
install.packages("XML")
library(dplR)
rings <- read.rwl(paste0("data/core_files/canopy_cores/", file)) #read in rwl file
canopy <- list()
widths_can <- list()
canopy_table <- NULL
for (i in seq(along=dirs_can)){
for (j in seq(along=sp_can)){
if (i==j){
file <- dirs_can[[i]]
rings <- read.rwl(paste0("data/core_files/canopy_cores/", file)) #read in rwl file
area <- bai.in(rings) #convert to bai.in
testr <- res.comp(area, nb.yrs=5, res.thresh.neg = 30, series.thresh = 50) #get resilience metrics
canopy[[i]] <- testr
widths_can[[i]] <- rings
testr_table <- data.frame(testr$out)
testr_table <- testr_table[testr_table$nb.series > 4, ] #remove where there are < 4 series
testr_table$sp <- sp_can[[j]]
testr_table$position <- "canopy"
canopy_table <- rbind(canopy_table, testr_table)
}
}
}
View(canopy)
rings <- read.rwl(paste0("data/core_files/canopy_cores/", file)) #read in rwl file
rings
View(rings)
?res.comp
View(area)
View(canopy)
values <- paste0(sp_can, "_can_res")
names(canopy) <- values
values <- paste0(sp_can, "_canopy")
names(widths_can) <- values
View(canopy)
View(canopy$cagl_can_res)
View(canopy$cagl_can_res)
View(canopy$cagl_can_res$resist)
