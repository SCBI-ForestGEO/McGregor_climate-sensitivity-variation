#put r2 in table
delta <- data.frame(var_aic$Delta_AICc[[w]])
colnames(delta) <- paste0("[All years] ","Model #", w)
delta$model_var <- "dAICc"
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0("[All years] ","Model #", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(delta, r, coeff)
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
#INDIVIDUAL YEARS
} else if (j == i){
response <- "resist.value"
effects <- best_mod_full_year
#create all combinations of random / fixed effects
effects_comb <-
unlist( sapply( seq_len(length(effects)),
function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(paste0("[", names(model_df[j]), "] ","Model #", w), "model_var")
#put r2 in table
delta <- data.frame(var_aic$Delta_AICc[[w]])
colnames(delta) <- paste0("[", names(model_df[j]), "] ","Model #", w)
delta$model_var <- "dAICc"
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0("[", names(model_df[j]), "] ","Model #", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(delta, r, coeff)
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
}
}
top_models <- rbind(top_models, top)
}
View(top_models)
write.csv(best_mod_traits, "manuscript/tables_figures/tested_traits_best.csv", row.names=FALSE)
write.csv(top_models, "manuscript/tables_figures/tableS4_top_models_dAIC.csv", row.names=FALSE)
View(coeff_list)
names(coeff_list)
sort(grepl("coeff_trees_all", names(coeff_list)))
sort(grep("coeff_trees_all", names(coeff_list)))
coeff_list1 <- coeff_list[c(sort(grep("coeff_trees_all", names(coeff_list))))]
View(coeff_list1)
ord <- c(1:6)
ord <- c(1:6)
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])
]
coeff_list1 <- ord[c(sort(order(ord)[names(coeff_list)])]
coeff_list1 <- ord[c(sort(order(ord)[names(coeff_list)]))]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list]))]
grepl("trees_all", names(coeff_list))
names(coeff_list)[grepl("trees_all", names(coeff_list))
]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])))]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))]))), ord]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])), ord)]
grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
grep("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
coeff_list1 <- coeff_list[order(match(grep("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])), ord)]
?order
?str_extract
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))]))
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
names(coeff_list)[grepl("trees_all", names(coeff_list))]
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
names(coeff_list)[grepl("trees_all", names(coeff_list))]
meh <- names(coeff_list)[grepl("trees_all", names(coeff_list))]
str_extract("[[:digit:]]", meh)
str_extract(meh, "[[:digit:]]")
coeff_list1 <-
coeff_list[
order(
match(
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))),
ord)]
coeff_list1 <-
coeff_list[
order(
match(
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]")),
ord))]
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))
as.numeric(str_extract(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))
coeff_list1 <-
coeff_list[
order(
match(
as.numeric(str_extract(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list1)
coeff_list1 <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]")),
ord))]
View(coeff_list1)
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]"))
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]"))
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]")
str_extract(names(coeff_list), "[[:digit:]]")
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
x[order(match(x,y))]
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
View(coeff_list1)
View(coeff_list)
q=1
coeff_list1 <- list()
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list_temp)
coeff_list1 <- c(coeff_list1, coeff_list_temp)
q=2
ord_lab[[q]]
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list_temp)
names(coeff_list)[grepl(ord_lab[[q]]
names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))]
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord)
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
View(coeff_list_temp)
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
ord <- c(1:6, 2:10)
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
View(coeff_list_temp)
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
View(coeff_list_temp)
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
View(coeff_list1)
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
merge.all <- function(x, y) {
merge(x, y, all=TRUE, by="model_var")
}
coeff_table <- Reduce(merge.all, coeff_list)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept", "1966", "1977", "1999", "ln[H]", "D", "C", "I", "S", "ln[TWI]", "PLA", "TLP") #only if year is variable
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
View(coeff_new)
coeff_table <- Reduce(merge.all, coeff_list1)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
coeff_table <- Reduce(merge.all, coeff_list1)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
# coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
#                            "position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
#                           "rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
View(coeff_new)
write.csv(coeff_new, "manuscript/tables_figures/tested_traits_best_coeff.csv", row.names=FALSE)
install.packages("ggstance")
library(ggplot2)
#2 height by crown position in 2018 ####
library(RCurl) #2
library(tidyr) #2
library(grid) #2
library(gridExtra) #2
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
current_ht <- trees_all[!duplicated(trees_all$tree), ]
current_ht$year <- 2018
current_ht <- current_ht[,c(1:4,13:15,17:19)]
current_ht$dbh_old.mm <- scbi.stem3$dbh[match(current_ht$tree, scbi.stem3$tag)]
current_ht$dbh_old.cm <- current_ht$dbh_old.mm/10
current_ht$dbh.ln.cm <- log(current_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
current_ht$height.ln.m <-
ifelse(current_ht$sp == "caco", (0.348+0.808*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cagl", (0.681+0.704*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "caovl", (0.621+0.722*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cato", (0.776+0.701*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fagr", (0.708+0.662*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fram", (0.715+0.619*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "juni", (1.22+0.49*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "litu", (1.32+0.524*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qual", (1.14+0.548*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qupr", (0.44+0.751*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quru", (1.17+0.533*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quve", (0.864+0.585*current_ht$dbh.ln.cm),
(0.791+0.645*current_ht$dbh.ln.cm)))))))))))))
current_ht$height.m <- exp(current_ht$height.ln.m)
current_ht <- current_ht[order(current_ht$tree, current_ht$year), ]
#graphing height by crown position (for paper)
current_ht <- current_ht[!is.na(current_ht$position_all), ]
current_ht$position_all_abb <- substring(current_ht$position_all, 0, 1)
current_ht$position_all_abb <- toupper(current_ht$position_all_abb)
current_ht$position_all_abb <- factor(current_ht$position_all_abb, levels = c("D", "C", "I", "S"))
heights <-
ggplot(data = current_ht, aes(x = position_all_abb, y = height.m, group = position_all)) +
# aes(x=position_all, y=height.m, fill=year) +
geom_boxplot() +
xlab("Crown position") +
ylab("Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_minimal() +
theme(axis.text = element_text(size=12)) +
theme(axis.title = element_text(size=14))
##2b. get height data for all trees >10cm dbh in census ####
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi18_ht <- scbi.stem3
scbi18_ht <- scbi18_ht[scbi18_ht$dbh>=100, ]
scbi18_ht <- scbi18_ht[,c(2:5,11,14:15)]
scbi18_ht$dbh_old.cm <- scbi18_ht$dbh/10
scbi18_ht$dbh.ln.cm <- log(scbi18_ht$dbh_old.cm)
#linear log-log regression
scbi18_ht$height.ln.m <-
ifelse(scbi18_ht$sp == "caco", (0.348+0.808*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cagl", (0.681+0.704*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "caovl", (0.621+0.722*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cato", (0.776+0.701*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fagr", (0.708+0.662*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fram", (0.715+0.619*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "juni", (1.22+0.49*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "litu", (1.32+0.524*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qual", (1.14+0.548*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qupr", (0.44+0.751*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quru", (1.17+0.533*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quve", (0.864+0.585*scbi18_ht$dbh.ln.cm),
(0.791+0.645*scbi18_ht$dbh.ln.cm)))))))))))))
scbi18_ht$height.m <- exp(scbi18_ht$height.ln.m) #used below in #4
##2c. combine heights to make plot with all years ####
#these are the crown positions with height for the trees in the analysis
current_ht_sub <- current_ht[,c("year", "position_all_abb", "height.m")]
#these are the crown positions with height for all other trees from 2018
dend_core_full <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
scbi18_ht$position_all_abb <- dend_core_full$crown.position[match(scbi18_ht$stemID, dend_core_full$stemID)]
scbi18_ht_sub <- scbi18_ht[!is.na(scbi18_ht$position_all_abb), ]
scbi18_ht_sub$year <- "2018"
scbi18_ht_sub <- scbi18_ht_sub[,c("year", "position_all_abb", "height.m")]
heights_all <- rbind(current_ht_sub)
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("year", "position_all_abb", "height.m")]
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
#NOTE ...using scbi18_ht_sub
##scbi18_ht_sub = log-derived 2018 heights of all trees in census (but ofc, only those we have crown position data for)
heights_allplot1 <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot1$position_all_abb <- factor(heights_allplot1$position_all_abb, levels=c("D","C","I","S"))
heights_allplot1$year <- as.character(heights_allplot1$year)
View(scbi18_ht)
View(trees_all)
View(current_ht)
#these are the crown positions with height for the trees in the analysis
current_ht_sub <- current_ht[,c("tree", "year", "position_all_abb", "height.m")]
#these are the crown positions with height for all other trees from 2018
dend_core_full <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
scbi18_ht$position_all_abb <- dend_core_full$crown.position[match(scbi18_ht$stemID, dend_core_full$stemID)]
scbi18_ht_sub <- scbi18_ht[!is.na(scbi18_ht$position_all_abb), ]
scbi18_ht_sub$year <- "2018"
scbi18_ht_sub <- scbi18_ht_sub[,c("tag", "year", "position_all_abb", "height.m")]
heights_all <- rbind(current_ht_sub)
setnames(heights_all, old="tag", new="tree")
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("tree", "year", "position_all_abb", "height.m")]
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
library(data.table)
current_ht_sub <- current_ht[,c("tree", "year", "position_all_abb", "height.m")]
#these are the crown positions with height for all other trees from 2018
dend_core_full <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
scbi18_ht$position_all_abb <- dend_core_full$crown.position[match(scbi18_ht$stemID, dend_core_full$stemID)]
scbi18_ht_sub <- scbi18_ht[!is.na(scbi18_ht$position_all_abb), ]
scbi18_ht_sub$year <- "2018"
scbi18_ht_sub <- scbi18_ht_sub[,c("tag", "year", "position_all_abb", "height.m")]
heights_all <- rbind(current_ht_sub)
setnames(heights_all, old="tag", new="tree")
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("tree", "year", "position_all_abb", "height.m")]
current_ht_sub <- current_ht[,c("tree", "year", "position_all_abb", "height.m")]
#these are the crown positions with height for all other trees from 2018
dend_core_full <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
scbi18_ht$position_all_abb <- dend_core_full$crown.position[match(scbi18_ht$stemID, dend_core_full$stemID)]
scbi18_ht_sub <- scbi18_ht[!is.na(scbi18_ht$position_all_abb), ]
scbi18_ht_sub$year <- "2018"
scbi18_ht_sub <- scbi18_ht_sub[,c("tag", "year", "position_all_abb", "height.m")]
setnames(scbi18_ht_sub, old="tag", new="tree")
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("tree", "year", "position_all_abb", "height.m")]
#NOTE notice diff when using current_ht_sub versus...
##current_ht_sub = log-derived 2018 heights of only trees in trees_all
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
#NOTE ...using scbi18_ht_sub
##scbi18_ht_sub = log-derived 2018 heights of all trees in census (but ofc, only those we have crown position data for)
heights_allplot1 <- rbind(trees_all_plot, scbi18_ht_sub)
heights_allplot1$position_all_abb <- factor(heights_allplot1$position_all_abb, levels=c("D","C","I","S"))
heights_allplot1$year <- as.character(heights_allplot1$year)
setdiff(heights_allplot$tree, heights_allplot1$tree)
setdiff(heights_allplot1$tree, heights_allplot$tree)
