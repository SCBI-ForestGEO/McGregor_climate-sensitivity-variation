#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
neon_vars[[i]] <- neon_data_sub
names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
}
View(neon_vars)
View(neon_vars)
neon_data_sub[, value]
i=1
#this loop for some reason isn't producing plotly graphs that will work, but everything else runs smoothly
neon_vars <- list()
dp$value <- as.character(dp$value)
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
View(neon_data_sub)
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
neon_data_sub <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(paste0("total_", dp$data[[i]]) = mean(neon_data_sub[, value], na.rm=TRUE))
paste0("total_", dp$data[[i]])
colname <- paste0("total_", dp$data[[i]])
neon_data_sub <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(colname[[1]] = mean(neon_data_sub[, value], na.rm=TRUE))
neon_data_sub <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(colname[1] = mean(neon_data_sub[, value], na.rm=TRUE))
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(tempSingleMean, na.rm=TRUE))
?summarize
neon_data_sub <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(dp$data[[i]] = mean(neon_data_sub[, value], na.rm=TRUE))
neon_data_sub <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(value = mean(neon_data_sub[, value], na.rm=TRUE))
View(neon_data_sub)
mean(neon_data_sub[, value]
)
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(value = mean(neon_data_sub[, value], na.rm=TRUE))
View(data_analy)
View(neon_data_sub)
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
dp$data[[i]]
View(SAAT_graph)
SAAT_graph
value == "tempSingleMean"
x10 <- neon_data_sub[neon_data_sub$verticalPosition == 10, ]
View(x10)
x10 <- x10[!is.na(x10$tempSingleMean), ]
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition != 10, ]
neon_vars[[i]] <- neon_data_sub
names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
View(neon_vars)
neon_vars[[1]]$month
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
neon_vars[[i]]
neon_vars[i]
neon_vars[[i]][3]
colnames(neon_vars[[i]][3])
p <- ggplot(neon_vars[i]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
new_df <- neon_vars[i]
new_df <- neon_vars[[i]]
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub[3] <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub[3])
}
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
}
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(value = mean(neon_data_sub[, value], na.rm=TRUE))
View(data_analy)
mean(neon_data_sub[, value]
)
mean(neon_data_sub[, value]
)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(value = mean(neon_data_sub[, value], na.rm=TRUE))
View(data_analy)
neon_data_sub[, value]
mean(neon_data_sub[, value], na.rm=TRUE)
i=1
i=1
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"))
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
dp[] <- lapply(dp, as.character)
#this loop for some reason isn't producing plotly graphs that will work, but everything else runs smoothly
neon_vars <- list()
dp$value <- as.character(dp$value)
value <- dp$value[[i]]
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
library(neonUtilities)
library(plotly)
library(lubridate)
library(dplyr)
library(data.table)
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate="2018-05",
enddate="2018-08")
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
# neon_data_sub$startDateTime <- ymd_hms(as.character(neon_data_sub$startDateTime))
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
neon_data_sub$month <- NA
neon_data_sub$month <- ifelse(grepl("05", neon_data_sub$day), "May",
ifelse(grepl("06", neon_data_sub$day), "June",
ifelse(grepl("07", neon_data_sub$day), "July", "August")))
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if(value == "tempSingleMean"){
neon_data_sub$tempSingleMean <- ifelse(neon_data_sub$verticalPosition == 10, NA, neon_data_sub$tempSingleMean)
}
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(value = mean(neon_data_sub[, value], na.rm=TRUE))
View(data_analy)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[, value], na.rm=TRUE))
View(data_analy)
neon_data_sub %>%
group_by(month, verticalPosition)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(dp$data[i], na.rm=TRUE))
warnings()
View(data_analy)
value
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(value, na.rm=TRUE))
warnings*
warnings()
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[, 3], na.rm=TRUE))
View(data_analy)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[, 3], na.rm=TRUE))
mean(neon_data_sub[, 3], na.rm=TRUE)
data_analy <- neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
dplyr::summarize(test = mean(neon_data_sub[, 3], na.rm=TRUE))
View(data_analy)
?group_by
neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
neon_data_sub %>%
dplyr::group_by(month, verticalPosition)
?summarize
data_analy <- neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
dplyr::summarize(test = mean(neon_data_sub[[value]], na.rm=TRUE))
View(data_analy)
x20 <- neon_data_sub[neon_data_sub$verticalPosition == 20, ]
View(x20)
mean(x20$tempSingleMean, na.rm=TRUE)
neon_data_sub %>% group_by(month, verticalPosition) %>% summarize(test = mean(tempSingleMean, na.rm=TRUE))
data_analy <- neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
dplyr::summarize(test = mean(print(value), na.rm=TRUE))
data_analy <- neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
dplyr::summarize(test = mean(print(value), na.rm=TRUE))
colnames(neon_data_sub[[3]])
neon_data_sub[[3]]
colnames(neon_data_sub[[value]]
)
View(neon_data_sub)
neon_data_sub[, value]
colnames(neon_data_sub[, value]
)
colnames(neon_data_sub)
colnames(neon_data_sub[3])
data_analy <- neon_data_sub %>%
dplyr::group_by(month, verticalPosition) %>%
dplyr::summarize(test = mean(colnames(neon_data_sub[3]), na.rm=TRUE))
warnings()
View(data_analy)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[3]), na.rm=TRUE)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]]), na.rm=TRUE)
View(data_analy)
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
}
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
SAAT_plot
wind_plot
biotemp_plot
RH_plot
SR_plot
##make this below into loop
#determine threshold for sunny/cloudy day ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_difRad = mean(difRadMean, na.rm=TRUE), mean_dirRad = mean(dirRadMean, na.rm=TRUE))
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_sun = sum(sunPres, na.rm=TRUE))
q1 <- q[c(1,2)]
q1$type <- "difRad"
setnames(q1, old="mean_difRad", new="measure")
q2 <- q[c(1,3)]
q2$type <- "dirRad"
setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
}
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
SAAT_plot
wind_plot
biotemp_plot
RH_plot
SR_plot
##make this below into loop
#determine threshold for sunny/cloudy day ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_difRad = mean(difRadMean, na.rm=TRUE), mean_dirRad = mean(dirRadMean, na.rm=TRUE))
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_sun = sum(sunPres, na.rm=TRUE))
q1 <- q[c(1,2)]
q1$type <- "difRad"
setnames(q1, old="mean_difRad", new="measure")
q2 <- q[c(1,3)]
q2$type <- "dirRad"
setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
data_analy <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(neon_data_sub[[3]], na.rm=TRUE)
neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(test = mean(tempSingleMean, na.rm=TRUE))
#base ggplot, all months on same graph
neon_vars[[i]]$month_f <- factor(neon_vars[[i]]$month, levels=c("May", "June", "July", "August"))
p <- ggplot(neon_vars[[i]]) +
geom_line(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f), size = 1) +
scale_color_manual(values = c("orange", "red", "dark green", "blue"), name = "Month") +
geom_point(aes(x = verticalPosition, y = colnames(neon_vars[[i]][3]), color = month_f)) +
labs(title = "Mean monthly windspeed 2018", x = "Height (m)", y = "Windspeed (m/s)") +
theme_grey()
#graph in split sections
p + facet_grid(.~month_f)
wind <- neon_data_sub %>%
group_by(month, verticalPosition) %>%
summarize(total_ws = mean(windSpeedMean, na.rm=TRUE))
}
#graph with plotly
y <- list(title = value)
assign(paste0(dp$data[[i]], "_plot"),
plot_ly(data = neon_data_sub, x = ~startDateTime, y = ~neon_data_sub[, value], type = "scatter", color = ~verticalPosition, mode = "markers") %>%
layout(yaxis = y))
#graph with ggplot
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
assign(paste0(dp$data[[i]], "_graph"),
ggplot(data = neon_data_sub) +
aes_string(x = colnames(neon_data_sub)[2], y = colnames(neon_data_sub)[3]) +
geom_point(aes(group=verticalPosition, color=verticalPosition)) +
theme_minimal())
SAAT_plot
wind_plot
biotemp_plot
RH_plot
SR_plot
##make this below into loop
#determine threshold for sunny/cloudy day ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_difRad = mean(difRadMean, na.rm=TRUE), mean_dirRad = mean(dirRadMean, na.rm=TRUE))
q <- neon_data_sub %>%
group_by(day) %>%
summarize(mean_sun = sum(sunPres, na.rm=TRUE))
q1 <- q[c(1,2)]
q1$type <- "difRad"
setnames(q1, old="mean_difRad", new="measure")
q2 <- q[c(1,3)]
q2$type <- "dirRad"
setnames(q2, old="mean_dirRad", new="measure")
q3 <- rbind(q1,q2)
# other small things ####
boxplot(q$total_Rad)
ggplot(q) +
aes(x = day, y = total_Rad) +
geom_point(color = "#0c4c8a") +
theme_minimal()
esquisser()
neon_data <- neon_air[[1]]
unique(neon_data$verticalPosition)
neon_data_sub <- neon_data[ ,c("verticalPosition", "startDateTime", "tempSingleMean")]
neon_data_sub <- neon_data_sub[neon_data_sub$tempSingleMean > -10, ]
ggplot(data = neon_data_sub) +
aes(x = startDateTime, y = tempSingleMean) +
geom_point(color = "#0c4c8a") +
theme_minimal()+
facet_wrap(~verticalPosition)
neon_data_sub$verticalPosition <- as.character(neon_data_sub$verticalPosition)
ggplot(data = neon_data_sub) +
aes(x = startDateTime) +
geom_line(aes(y=tempSingleMean, group=verticalPosition, color=verticalPosition)) +
theme_minimal()
