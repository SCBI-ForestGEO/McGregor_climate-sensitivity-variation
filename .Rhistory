#ALL YEARS
if(j == 1 & h == 1 & k == 1 & l == 1){
lmm_all <- lapply(models, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- models
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=FALSE) #rank based on AICc
#put AIC value in table (#null - test)
sum_mod_traits[,column][[i]] <- var_aic$AICc[[1]] - var_aic$AICc[[2]]
sum_mod_traits[,column][[i]] <- round(sum_mod_traits[,column][[i]], 3)
for (z in seq(along = lmm_all)){
if (names(lmm_all[z]) == test_mod){
coeff <- data.frame(coef(summary(lmm_all[[z]]))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
colnames(coeff) <- c("value", "model_var")
coeff$value <- round(coeff$value, 4)
coeff$combo <- paste0(coeff$model_var, " (", coeff$value, ")")
coeff$mod <- gsub("coef_", "", column_cof)
if(i == 6){
coeff <- coeff[grepl("height.ln.m:", coeff$combo), ]
} else {
coeff <- coeff[grepl(sum_mod_traits$variable[[i]], coeff$combo), ]
}
coeff_vec <- coeff$combo
#this rbind is to get a full df showing all coefficient values from the entire for-loop
coeff_all <- rbind(coeff_all, coeff)
#put coefficients in table
sum_mod_traits[,column_cof][[i]] <- ifelse(any(coeff$value < 0), "-", "+")
sum_mod_traits[,column_cof_val][[i]] <- paste(coeff_vec, collapse = ", ")
}
}
#INDIVIDUAL YEARS
} else if (j == h & h == k & k == l){
if(i == 1){
sum_mod_traits[,column][[i]] <- NA
sum_mod_traits[,column_cof][[i]] <- NA
sum_mod_traits[,column_cof_val][[i]] <- NA
}
lmm_all <- lapply(models_yr, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- models_yr
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=FALSE) #rank based on AICc
#put AIC value in table (null - tested)
sum_mod_traits[,column][[i]] <- var_aic$AICc[[1]] - var_aic$AICc[[2]]
sum_mod_traits[,column][[i]] <- round(sum_mod_traits[,column][[i]], 3)
for (z in seq(along = lmm_all)){
if (names(lmm_all[z]) == test_mod_yr){
coeff <- data.frame(coef(summary(lmm_all[[z]]))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
colnames(coeff) <- c("value", "model_var")
coeff$value <- round(coeff$value, 4)
coeff$combo <- paste0(coeff$model_var, " (", coeff$value, ")")
coeff$mod <- gsub("coef_", "", column_cof)
if(i == 6){
coeff <- coeff[grepl("height.ln.m:", coeff$combo), ]
} else {
coeff <- coeff[grepl(sum_mod_traits$variable[[i]], coeff$combo), ]
}
coeff_vec <- coeff$combo
#this rbind is to get a full df showing all coefficient values from the entire for-loop
coeff_all <- rbind(coeff_all, coeff)
#put coefficients in table
sum_mod_traits[,column_cof][[i]] <- ifelse(any(coeff$value < 0), "-", "+")
sum_mod_traits[,column_cof_val][[i]] <- paste(coeff_vec, collapse = ", ")
}
}
}
}
}
}
}
}
cand_full <- NULL
for (i in seq(along=sum_mod_traits[,c(8,11,14,17)])){
column <- colnames(sum_mod_traits[,c(8,11,14,17)])[[i]]
cand <- sum_mod_traits[sum_mod_traits[,column] > 1 &
!sum_mod_traits$variable %in% c("dbh.ln.cm"), c(1:3)]
cand$top_model <- c("all", "1966", "1977", "1999")[[i]]
cand_full <- rbind(cand_full, cand)
cand_full <- cand_full[order(cand_full$prediction), ]
}
write.csv(sum_mod_traits, "manuscript/tables_figures/tested_traits_all.csv", row.names=FALSE)
write.csv(cand_full, "manuscript/tables_figures/tableS3_candidate_traits.csv", row.names=FALSE)
View(sum_mod_traits)
##6b. determine the best full model ####
best_mod_traits <- data.frame("best_model" = NA,
"scenario" = c("all droughts", "1966", "1977", "1999")
)
best_mod_full <- c(unique(cand_full$variable), "(1|sp/tree)")
best_mod_full_year <- gsub("/tree", "", best_mod_full)
best_mod_full_year <- best_mod_full_year[!best_mod_full_year %in% c("year")]
#this loop determines the best full model for each scenario, using the traits from cand_full in #6a, and populates the table created above
mods <- names(model_df)
top_models <- NULL
coeff_list <- list()
for (i in seq(along=c(1:4))){
for (j in seq(along=model_df)){
#ALL YEARS
if(j == 1 & i == 1){
response <- "resist.value"
effects <- best_mod_full
#create all combinations of random / fixed effects
effects_comb <-
unlist(sapply(seq_len(length(effects)), function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
#pair response with effect and sub out combinations that don't include random effects
#in general, if two variables are >70% correlated, you can toss one of them without significantly affecting the results
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
# formulas for all combinations. $Var1 is the response, and $Var2 is the effect
# for good stats, you should have no more total parameters than 1/10th the number of observations in your dataset
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
var_aic$mod_no <- rownames(var_aic)
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(paste0("[All years] ","Model #", w), "model_var")
#put r2 in table
delta <- data.frame(var_aic$Delta_AICc[[w]])
colnames(delta) <- paste0("[All years] ","Model #", w)
delta$model_var <- "dAICc"
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0("[All years] ","Model #", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(delta, r, coeff)
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
#INDIVIDUAL YEARS
} else if (j == i){
response <- "resist.value"
effects <- best_mod_full_year
#create all combinations of random / fixed effects
effects_comb <-
unlist( sapply( seq_len(length(effects)),
function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(paste0("[", names(model_df[j]), "] ","Model #", w), "model_var")
#put r2 in table
delta <- data.frame(var_aic$Delta_AICc[[w]])
colnames(delta) <- paste0("[", names(model_df[j]), "] ","Model #", w)
delta$model_var <- "dAICc"
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0("[", names(model_df[j]), "] ","Model #", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(delta, r, coeff)
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
}
}
top_models <- rbind(top_models, top)
}
View(top_models)
write.csv(best_mod_traits, "manuscript/tables_figures/tested_traits_best.csv", row.names=FALSE)
write.csv(top_models, "manuscript/tables_figures/tableS4_top_models_dAIC.csv", row.names=FALSE)
View(coeff_list)
names(coeff_list)
sort(grepl("coeff_trees_all", names(coeff_list)))
sort(grep("coeff_trees_all", names(coeff_list)))
coeff_list1 <- coeff_list[c(sort(grep("coeff_trees_all", names(coeff_list))))]
View(coeff_list1)
ord <- c(1:6)
ord <- c(1:6)
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list[grepl("trees_all", names(coeff_list))]])
]
coeff_list1 <- ord[c(sort(order(ord)[names(coeff_list)])]
coeff_list1 <- ord[c(sort(order(ord)[names(coeff_list)]))]
coeff_list1 <- ord[c(sort(order(ord)[coeff_list]))]
grepl("trees_all", names(coeff_list))
names(coeff_list)[grepl("trees_all", names(coeff_list))
]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])))]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))]))), ord]
coeff_list1 <- coeff_list[order(match(grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])), ord)]
grepl("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
grep("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
coeff_list1 <- coeff_list[order(match(grep("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])), ord)]
?order
?str_extract
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))]))
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
names(coeff_list)[grepl("trees_all", names(coeff_list))]
str_extract("[[:digit:]]", names(coeff_list)[grepl("trees_all", names(coeff_list))])
names(coeff_list)[grepl("trees_all", names(coeff_list))]
meh <- names(coeff_list)[grepl("trees_all", names(coeff_list))]
str_extract("[[:digit:]]", meh)
str_extract(meh, "[[:digit:]]")
coeff_list1 <-
coeff_list[
order(
match(
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))),
ord)]
coeff_list1 <-
coeff_list[
order(
match(
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]")),
ord))]
str_extract(as.numeric(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))
as.numeric(str_extract(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]"))
coeff_list1 <-
coeff_list[
order(
match(
as.numeric(str_extract(names(coeff_list)[grepl("trees_all", names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list1)
coeff_list1 <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]")),
ord))]
View(coeff_list1)
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]"))
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]"))
str_extract(names(coeff_list)[names(coeff_list)], "[[:digit:]]")
str_extract(names(coeff_list), "[[:digit:]]")
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
x[order(match(x,y))]
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
View(coeff_list1)
View(coeff_list)
q=1
coeff_list1 <- list()
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list_temp)
coeff_list1 <- c(coeff_list1, coeff_list_temp)
q=2
ord_lab[[q]]
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")),
ord))]
View(coeff_list_temp)
names(coeff_list)[grepl(ord_lab[[q]]
names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))]
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]")
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord)
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
View(coeff_list_temp)
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
ord <- c(1:6, 2:10)
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
View(coeff_list_temp)
coeff_list_temp <-
coeff_list[
order(
match(
as.numeric(
str_extract(names(coeff_list)[grepl(ord_lab[[q]], names(coeff_list))], "[[:digit:]]$")),
ord))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
View(coeff_list_temp)
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
View(coeff_list1)
ord_lab <- c("trees_all", "x1966", "x1977", "x1999")
coeff_list1 <- list()
for(q in seq(along=ord_lab)){
coeff_list_temp <- coeff_list[grepl(ord_lab[[q]], names(coeff_list))]
coeff_list_temp <-
coeff_list_temp[
order(
match(
as.numeric(
str_extract(names(coeff_list_temp)[grepl(ord_lab[[q]], names(coeff_list_temp))], "[[:digit:]]$")),
ord))]
coeff_list1 <- c(coeff_list1, coeff_list_temp)
}
merge.all <- function(x, y) {
merge(x, y, all=TRUE, by="model_var")
}
coeff_table <- Reduce(merge.all, coeff_list)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept", "1966", "1977", "1999", "ln[H]", "D", "C", "I", "S", "ln[TWI]", "PLA", "TLP") #only if year is variable
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
View(coeff_new)
coeff_table <- Reduce(merge.all, coeff_list1)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
coeff_table <- Reduce(merge.all, coeff_list1)
coeff_table[,2:ncol(coeff_table)] <- round(coeff_table[,2:ncol(coeff_table)], 3)
coeff_new <- as.data.frame(t(coeff_table[,-1]))
colnames(coeff_new) <- coeff_table$model_var
# coeff_new$year1966 <- ifelse(!is.na(coeff_new$year1977), 0, NA) #only applicable if "year" is a significant variable
coeff_new$codominant <- ifelse(!is.na(coeff_new$position_alldominant), 0, NA)
coeff_new$rpdiffuse <- ifelse(!is.na(coeff_new$rpring), 0, NA)
# coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
#                            "position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
#                           "rpdiffuse", "rpring", "rpsemi-ring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
coeff_new <- coeff_new[, c("dAICc","r^2", "(Intercept)", "height.ln.m",
"position_alldominant", "codominant", "position_allintermediate","position_allsuppressed",
"rpdiffuse", "rpring", "TWI.ln", "PLA_dry_percent", "mean_TLP_Mpa")]
# colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "semi-ring", "ln[TWI]", "PLA", "TLP")
colnames(coeff_new) <- c("dAICc", "r^2", "Intercept","ln[H]", "D", "C", "I", "S", "diffuse", "ring", "ln[TWI]", "PLA", "TLP")
coeff_new <- setDT(coeff_new, keep.rownames = TRUE)[]
setnames(coeff_new, old="rn", new="rank")
patterns <- c("\\[", "x", "\\]")
for(i in seq(along=patterns)){
coeff_new$rank <- gsub(patterns[[i]], "", coeff_new$rank)
}
View(coeff_new)
write.csv(coeff_new, "manuscript/tables_figures/tested_traits_best_coeff.csv", row.names=FALSE)
