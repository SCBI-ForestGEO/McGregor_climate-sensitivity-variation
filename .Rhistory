current_ht <- trees_all[!duplicated(trees_all$tree), ]
current_ht$year <- 2018
current_ht <- current_ht[,c(1:4,17:19)]
current_ht$dbh_old.mm <- scbi.stem3$dbh[match(current_ht$tree, scbi.stem3$tag)]
current_ht$dbh_old.cm <- current_ht$dbh_old.mm/10
current_ht$year_dbh <- ifelse(!is.na(current_ht$dbh_old.cm), 2018, NA)
#get original dbh if they died before 2018 (only need 2013)
scbi.stem2 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem2.csv"), stringsAsFactors = FALSE)
current_ht$dbh_old.mm <- ifelse(is.na(current_ht$dbh_old.mm),
scbi.stem2$dbh[match(current_ht$tree, scbi.stem2$tag)],
current_ht$dbh_old.mm)
current_ht$dbh_old.cm <- ifelse(is.na(current_ht$dbh_old.cm),
current_ht$dbh_old.mm/10,
current_ht$dbh_old.cm)
current_ht$year_dbh <- ifelse(is.na(current_ht$year_dbh), 2013, current_ht$year_dbh)
#get the log dbh and get heights
current_ht$dbh.ln.cm <- log(current_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
height_regr <- read.csv("manuscript/tables_figures/tableS2_height_regression.csv", stringsAsFactors = FALSE)
current_ht$height.ln.m <- NA
for(w in seq(along=height_regr$sp)){
sp_foc <- height_regr$sp[[w]]
ht_eq <- height_regr[height_regr$sp == sp_foc, ]
num <- gsub("\\*x", "", ht_eq$Equations)
num1 <- as.numeric(stri_extract_first_regex(num, "[[:digit:]].[[:digit:]]+"))
num2 <- as.numeric(stri_extract_last_regex(num, "[[:digit:]].[[:digit:]]+"))
if(sp_foc %in% current_ht[,"sp"]){
current_ht$height.ln.m <-
ifelse(current_ht$sp == sp_foc,
num1 + num2*current_ht$dbh.ln.cm,
current_ht$height.ln.m)
} else {
current_ht$height.ln.m <-
ifelse(current_ht$sp != sp_foc,
num1 + num2*current_ht$dbh.ln.cm,
current_ht$height.ln.m)
}
}
current_ht$height.m <- exp(current_ht$height.ln.m)
current_ht <- current_ht[order(current_ht$tree, current_ht$year), ]
#graphing height by crown position (for paper)
current_ht <- current_ht[!is.na(current_ht$position_all), ]
current_ht$position_all_abb <- substring(current_ht$position_all, 0, 1)
current_ht$position_all_abb <- toupper(current_ht$position_all_abb)
current_ht$position_all_abb <- factor(current_ht$position_all_abb, levels = c("D", "C", "I", "S"))
heights <-
ggplot(data = current_ht, aes(x = position_all_abb, y = height.m, group = position_all)) +
# aes(x=position_all, y=height.m, fill=year) +
geom_boxplot() +
xlab("Crown position") +
ylab("Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_minimal() +
theme(axis.text = element_text(size=12)) +
theme(axis.title = element_text(size=14))
##2b. get height data for all trees >10cm dbh in census ####
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi18_ht <- scbi.stem3
scbi18_ht <- scbi18_ht[scbi18_ht$dbh>=100, ]
scbi18_ht <- scbi18_ht[,c(2:5,11,14:15)]
scbi18_ht$dbh_old.cm <- scbi18_ht$dbh/10
scbi18_ht$dbh.ln.cm <- log(scbi18_ht$dbh_old.cm)
#linear log-log regression
#use height_regr from above
scbi18_ht$height.ln.m <- NA
for(w in seq(along=height_regr$sp)){
sp_foc <- height_regr$sp[[w]]
ht_eq <- height_regr[height_regr$sp == sp_foc, ]
num <- gsub("\\*x", "", ht_eq$Equations)
num1 <- as.numeric(stri_extract_first_regex(num, "[[:digit:]].[[:digit:]]+"))
num2 <- as.numeric(stri_extract_last_regex(num, "[[:digit:]].[[:digit:]]+"))
if(sp_foc %in% scbi18_ht[,"sp"]){
scbi18_ht$height.ln.m <-
ifelse(scbi18_ht$sp == sp_foc,
num1 + num2*scbi18_ht$dbh.ln.cm,
scbi18_ht$height.ln.m)
} else {
scbi18_ht$height.ln.m <-
ifelse(scbi18_ht$sp != sp_foc,
num1 + num2*scbi18_ht$dbh.ln.cm,
scbi18_ht$height.ln.m)
}
}
scbi18_ht$height.m <- exp(scbi18_ht$height.ln.m) #used below in #4
##2c. combine heights to make plot with all years ####
trees_all$position_all_abb <- ifelse(trees_all$position_all == "dominant", "D",
ifelse(trees_all$position_all == "co-dominant", "C",
ifelse(trees_all$position_all == "suppressed", "S", "I")))
trees_all_plot <- trees_all[,c("tree", "year", "position_all_abb", "height.m", "dbh_old.cm")]
current_ht$position_all_abb <- ifelse(current_ht$position_all == "dominant", "D",
ifelse(current_ht$position_all == "co-dominant", "C",
ifelse(current_ht$position_all == "suppressed", "S", "I")))
current_ht_sub <- current_ht[,c("tree", "year", "position_all_abb", "height.m", "dbh_old.cm")]
#make plot
heights_allplot <- rbind(trees_all_plot, current_ht_sub)
heights_allplot$position_all_abb <- factor(heights_allplot$position_all_abb, levels=c("D","C","I","S"))
heights_allplot$year <- as.character(heights_allplot$year)
heights_allplot <- heights_allplot[order(heights_allplot$tree, heights_allplot$year), ]
png("manuscript/tables_figures/height_plot_analysis.png")
ggplot(na.omit(heights_allplot), aes(position_all_abb, height.m)) +
geom_boxplot(aes(fill=year)) +
xlab("Crown position") +
ylab("Height [m]") +
ggtitle("Height comparison with only trees in analysis")
dev.off()
heights_allplot$tree <- as.character(heights_allplot$tree)
heights_allplot$position_all_abb <- as.character(heights_allplot$position_all_abb)
meh <- as.data.table(heights_allplot)
#height growth showing massive negative growth from 1999 to 2018
test <- meh[year %in% c("1999", "2018"), .(shrunk = height.m[1] - height.m[2]),
by=.(tree, position_all_abb)
][, .(perc= sum(shrunk >0, na.rm=TRUE)/sum(shrunk>0 | shrunk <=0, na.rm=TRUE)),
by=.(position_all_abb)]
#dbh growth showing almost no negative growth from 1999 to 2018 (this means height equations are wrong)
test <- meh[year %in% c("1999", "2018"), .(shrunk = dbh_old.cm[1] - dbh_old.cm[2]),
by=.(tree, position_all_abb)
][, .(perc= sum(shrunk >0, na.rm=TRUE)/sum(shrunk>0 | shrunk <=0, na.rm=TRUE)),
by=.(position_all_abb)]
test <- meh[year %in% c("1999", "2018"), .(shrunk = dbh_old.cm[1] - dbh_old.cm[2]),
by=.(tree, position_all_abb)
][shrunk>0]
library(ggstance)
library(raster)
library(dplyr)
library(Hmisc)
library(magrittr)
##3a. get TWI values for all trees in census, add trait values ####
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi.stem3 <- scbi.stem3[scbi.stem3$dbh >= 100, ] #>10cm dbh
#get utm coords
source("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/R_scripts/SIGEO_plot_grid_UTMcoord.R", echo=TRUE)
plot_to_UTM(scbi.stem3)
scbi18 <- sigeo_coords
scbi18 <- scbi18[, c(2:5,20:21)]
scbi18_x <- scbi18[, c(5:6)]
topo <- raster("data/plot_TWI.tif")
twi <- raster::extract(topo, scbi18_x, method="simple")
scbi18$TWI <- twi
scbi18$TWI.ln <- log(scbi18$TWI)
#add in leaf traits (no rp because it's categorical)
leaf_traits <- trees_all[, c(4,6:8)]
for (i in seq(along=2:ncol(leaf_traits))){
trait <- colnames(leaf_traits[2:ncol(leaf_traits)])
scbi18[, trait[[i]]] <- leaf_traits[, trait[[i]]][match(scbi18$sp, leaf_traits$sp)]
}
##3b. create height groupings and graphs (Figure S1) ####
scbi18$height.m <- scbi18_ht$height.m[match(scbi18$stemID, scbi18_ht$stemID)]
scbi18$bins <- cut2(scbi18$height.m, g=19)
scbi18$bins_TWI <- cut2(scbi18$TWI, g=20)
type = c("tlp_ht", "pla_ht", "tlp_twi", "pla_twi")
var = c("mean_TLP_Mpa", "PLA_dry_percent", "mean_TLP_Mpa", "PLA_dry_percent")
breaks_tlp = c(-2.8,-2.6,-2.4,-2.2,-2.0,-1.8)
breaks_pla = c(8,12,16,20,24)
limits_tlp = c(-2.8,-1.8)
limits_pla = c(8,26)
for (i in seq(along=1:4)){
if(!grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$lab <- seq(5,95,by=5) #percentiles
df$num <- gsub("^.*,", "", df$bins) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
} else if (grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins_TWI) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$num <- gsub("^.*,", "", df$bins_TWI) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
}
#create plots
if(!grepl("twi", type[[i]])){
q <- ggplot(df, aes(x = avg, y = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbarh(aes(y = num, xmin = sdmin, xmax = sdmax, height=0.5, color=col)) +
scale_y_continuous(breaks=c(0,10,20,30,40,50,60), limits=c(0,60)) +
geom_path(aes(x=avg, y=num, color=col, group=1)) +
ylab("Height [m]") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==1){
q <- q +
xlab("TLP [MPa]") +
scale_x_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==2){
q <- q +
xlab("PLA [%]") +
scale_x_continuous(breaks=breaks_pla, limits=limits_pla)
}
} else if(grepl("twi", type[[i]])){
q <-
ggplot(df[!is.na(df$bins_TWI), ], aes(y = avg, x = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbar(aes(x = num, ymin = sdmin, ymax = sdmax, width=0.25, color=col)) +
geom_path(aes(x=num, y=avg, color=col, group=1)) +
scale_x_continuous(breaks=c(2,6,10,14), limits=c(0,16)) +
xlab("Topographic wetness index") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==3){
q <- q +
ylab("Mean turgor loss point [MPa]") +
scale_y_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==4){
q <- q +
ylab("Percent leaf area [%]") +
scale_y_continuous(breaks=breaks_pla, limits=limits_pla)
}
}
assign(paste0("plot_", type[i]), q)
}
library(ggpubr)
library(extrafont)
library(rasterVis)
loadfonts(device="win") #to get TNR
quantile(current_ht$height.m, c(.95), na.rm=TRUE) #95% quantile = 35.002m
quant <- data.frame(yintercept = 35.0022, Lines = "95th percentile")
##4c. height profiles ####
NEON_order <- c("(a)", "(b)", "(c)")
NEON_order_x <- c(0.5, 35, 7.5)
NEON_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
if(!i==1){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot,  nrow=1, ncol=3, align="h")
NEON
#export NEON graphs alone for use in SCBI plot book
png("E:/Github_SCBI/SCBI-Plot-Book/maps_figures_tables/ch_2_maps/NEON_climate.png", width=11, height=11, units="in", res=300)
NEON
dev.off()
#export NEON graphs alone for use in SCBI plot book
png("E:/Github_SCBI/SCBI-Plot-Book/maps_figures_tables/ch_2_maps/NEON_climate.png", width=11, height=7, units="in", res=300)
NEON
dev.off()
##4b. Export map of plot using TWI and cored tree locations ####
species <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
species <- species[!species$sp %in% c("frni", "pist"), ]
species$sp_fact <- as.factor(species$sp)
color_pallete_function <- colorRampPalette(
colors = c("pink","lightskyblue", "turquoise", "springgreen", "white", "khaki", "gold", "brown"),
space = "Lab" # Option used when colors do not represent a quantitative scale
)
species_colors <- color_pallete_function(nlevels(species$sp_fact))
cored_points <- SpatialPointsDataFrame(data.frame(species$NAD83_X, species$NAD83_Y), data=species)
plot.new()
#export TWI plot for SCBI plot book
contour <- read.csv("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/elevation/contour10m_SIGEO_coords.csv", stringsAsFactors=FALSE)
View(contour)
contour <- ~x+y
#export TWI plot for SCBI plot book
contour <- read.csv("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/elevation/contour10m_SIGEO_coords.csv", stringsAsFactors=FALSE)
coordinates(contour) <- ~x+y
layer(sp.lines(contour)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
key=list(space="right",
text=list(lab=levels(cored_points@data$sp_fact)),
points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour))
?panel
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour))
contour
cored_points
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(plot(contour))
contour <- as(contour, "SpatialLinesDataFrame")
x <- lapply(split(contour, contour$elev), function(x) Lines(list(Line(coordinates(x))), x$elev[1L]))
# the corrected part goes here:
lines <- SpatialLines(x)
data <- data.frame(id = unique(contour$elev))
rownames(data) <- data$id
l <- SpatialLinesDataFrame(lines, data)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l))
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l), col="white")
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
topo1 <- crop(topo, l)
topo1
plot(topo1)
levelplot(topo1, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
View(data)
View(l)
contour <- readOGR("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/shapefiles/contour10m_SIGEO_clipped.shp")
levelplot(topo1, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
View(contour)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
outline <- readOGR("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/shapefiles/ForestGEO_grid_outline.shp")
?crop
topo1 <- crop(topo, outline)
levelplot(topo1, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
?resample
topo1 <- resample(topo, outline)
?sp.lines
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
extent(outline)
extent(topo)
extent(topo) <- extent(outline)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
top1 <- as.data.frame(topo)
View(top1)
top1$x <- coordinates(topo)[1]
top1$y <- coordinates(topo)[2]
View(top1)
head(coordinates(topo))
top1$x <- coordinates(topo)[,1]
top1$y <- coordinates(topo)[,2]
View(top1)
NAD83.SW <- c(747385.521, 4308506.438)
NAD83.NW <- c(747370.676, 4309146.156)
## Angle (in radians) at which the plot's western boundary is offset from true NAD83 line of latitude
Offset <- atan2(NAD83.NW[1] - NAD83.SW[1], NAD83.NW[2] - NAD83.SW[2])
## Function that transforms grid coordinates into NAD83 coordinates
grid2nad83 <- function(x, y) {
NAD83.X <- NAD83.SW[1] + (x*cos(Offset) + y*sin(Offset))
NAD83.Y <- NAD83.SW[2] + (-x*sin(Offset) + y*cos(Offset))
nad83 <- list(NAD83.X, NAD83.Y)
names(nad83) <- c("NAD83_X", "NAD83_Y")
nad83
}
## add NAD83 coordinate columns to SIGEO data table
top2<-data.frame(top1$plot_TWI, grid2nad83(top1$x, top1$y))
View(top2)
## Angle (in radians) at which the plot's western boundary is offset from true NAD83 line of latitude
Offset <- atan2(NAD83.NW[1] - NAD83.SW[1], NAD83.NW[2] - NAD83.SW[2])
## add NAD83 coordinate columns to SIGEO data table
top2<-data.frame(top1$plot_TWI, grid2nad83(top1$x, top1$y))
View(top2)
extent(topo)
extent(outline)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
?clip
?crop
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(contour, col="white"))
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
# key=list(space="right",
#          text=list(lab=levels(cored_points@data$sp_fact)),
#          points=list(pch=20, fill=species_colors, col=species_colors)),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
#export TWI plot for SCBI plot book
contour <- read.csv("E:/Github_SCBI/SCBI-ForestGEO-Data/spatial_data/elevation/contour10m_SIGEO_coords.csv", stringsAsFactors=FALSE)
data@volcano
data(volcano)
force(volcano)
View(volcano)
?levelplot
cont <- raster(contour)
?raster
View(contour)
contour(contour)
coordinates(contour) <- ~x+y
contour(contour)
View(contour)
View(l)
png("E:/Github_SCBI/SCBI-Plot-Book/maps_figures_tables/ch_2_maps/TWI_map.png", width=5, height=7, units="in", res=300)
levelplot(topo, margin=FALSE, scales=list(draw=FALSE),
colorkey=list(space="left", width=0.75, height=0.75)) +
layer(sp.lines(l, col="white"))
dev.off()
heights
View(heights_allplot)
?cut
#dbh growth showing almost no negative growth from 1999 to 2018 (this means height equations are wrong)
meh$group <- cut(meh$year, breaks=3)
View(meh)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1])]
View(test)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree]
View(test)
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][.(avg_gro = mean(gro, na.rm=TRUE))]
test <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
View(test)
test66 <- meh[year %in% c("1966", "1977"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
test77 <- meh[year %in% c("1977", "1999"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
test99 <- meh[year %in% c("1999", "2018"), .(gro = height.m[2] - height.m[1]), by=tree
][, .(avg_gro = mean(gro, na.rm=TRUE))]
avg_growth <- data.frame(g66_77 = test66$avg_gro,
g77_99 = test77$avg_gro,
g99_18 = test99$avg_gro)
View(avg_growth)
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
#########################################################################
#2 height by crown position in 2018 ####
library(RCurl) #2
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
trees <- unique(trees_all$sp)
View(scbi.stem3)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
View(scbi.stem3)
test <- scbi.stem3[scbi.stem3$sp %in% trees & scbi.stem3$dbh >= 100, ]
