}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot,  nrow=1, ncol=3, align="h")
NEON
source('scripts/vertical_height_neon.R', echo=TRUE)
NEON_list <- list(wind_plot, RH_plot, SAAT_plot) #,"biotemp_plot")
names(NEON_list) <- c("wind_plot", "RH_plot", "SAAT_plot") #,"biotemp_plot
NEON_order <- c("(a)", "(b)", "(c)")
NEON_order_x <- c(0.5, 35, 7.5)
NEON_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.8),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==1){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
if(!i==1){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot,  nrow=1, ncol=3, align="h")
NEON
NEON_list[[3]]
NEON
NEON_order <- c("(a)", "(b)", "(c)")
NEON_order_x <- c(0.5, 35, 7.5)
NEON_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.8),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
if(!i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot,  nrow=1, ncol=3, align="h")
NEON
source('scripts/vertical_height_neon.R', echo=TRUE)
NEON_list <- list(wind_plot, RH_plot, SAAT_plot) #,"biotemp_plot")
names(NEON_list) <- c("wind_plot", "RH_plot", "SAAT_plot") #,"biotemp_plot
library(ggplot2)
library(neonUtilities)
library(lubridate)
library(dplyr)
library(tidyr)
library(stringr)
library(data.table)
library(grid)
library(gridExtra)
dp <- data.frame("data" = c("SAAT", "wind", "biotemp", "RH", "SR"),
"id" = c("DP1.00002.001", "DP1.00001.001", "DP1.00005.001", "DP1.00098.001", "DP1.00014.001"),
"value" = c("tempSingleMean", "windSpeedMean", "bioTempMean", "RHMean", "difRadMean"),
"xlabs" = c("Mean Air Temperature [°C]", "Wind [m/s]", "Mean Infrared Biological Temperature [°C]", "RH [%]", "Mean shortwave downward radiation [W/m^2]"))
dp <- dp[c(2,4,1,3,5), ]
dp[] <- lapply(dp, as.character)
dp$value <- as.character(dp$value)
date <- data.frame("year" = c(rep(2018, 4), rep(2017, 4), rep(2016, 4), rep(2015, 4)),
"month" = c(rep(5:8, 4)))
years <- c("2016", "2017", "2018")
for (i in seq(along=dp$value[1:3])){ #4 is biotemp and 5 is radiation (cloud vs sun threshold)
neon_data_all <- NULL
value <- dp$value[[i]]
for (j in seq(along=years)){
if (value != "RHMean" | j != 1){
neon_tower <- loadByProduct(dpID=dp$id[[i]],
site=c("SCBI"),
package="basic", avg=30,
check.size = FALSE,
#(use TRUE outside loop to see how big the dowloads are)
startdate=paste0(years[[j]], "-05"),
enddate=paste0(years[[j]], "-08"))
neon_data <- neon_tower[[1]]
neon_data_sub <- neon_data[colnames(neon_data) %in% c("verticalPosition", "startDateTime", value, "dirRadMean", "sunPres")]
#reformat dates
neon_data_sub$startDateTime <- as.character(neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- gsub("T", " ", neon_data_sub$startDateTime)
neon_data_sub$startDateTime <- as.POSIXct(neon_data_sub$startDateTime, format = "%Y-%m-%d %H:%M:%OS")
#get rid of erroneous April datapoints
neon_data_sub <- neon_data_sub[!grepl("04-30", neon_data_sub$startDateTime), ]
## make consolidated graph over different months for each variable ####
neon_data_sub$day <- substr(neon_data_sub$startDateTime, 1, nchar(neon_data_sub$startDateTime)-0)
#want to preserve the dfs, so put them in a list
# neon_vars[[i]] <- neon_data_sub
# names(neon_vars)[i] <- paste0("neon_", dp$data[[i]])
neon_data_all <- rbind(neon_data_all, neon_data_sub)
} else if(value == "RHMean" & j == 1){ #no RH data for 2016, so have to recreate the df to make sure code runs
neon_data_sub[, 3] <- NULL
neon_data_sub[, value] <- NA
neon_data_sub <- neon_data_sub[, c(1:2,4,3)]
neon_data_sub$verticalPosition <- ifelse(neon_data_sub$verticalPosition == 20,
60,
neon_data_sub$verticalPosition)
neon_data_sub <- neon_data_sub[neon_data_sub$verticalPosition %in% c(0, 60), ]
neon_data_sub$day <- str_replace(neon_data_sub$day, "2018", "2016")
neon_data_all <- rbind(neon_data_all, neon_data_sub)
}
}
#the 10m air temperature values are completely off, and stop at 19 May 2018. The sensor is broken and hasn't been fixed
if (value == "tempSingleMean"){
neon_data_all$tempSingleMean <- ifelse(neon_data_all$verticalPosition == 10 &
grepl("2018", neon_data_all$day), NA,
neon_data_all$tempSingleMean)
}
#get mean of values per month per verticalPosition
data_analy <- neon_data_all %>%
group_by(day, verticalPosition) %>%
summarize(test_max = max(get(value), na.rm=TRUE),
test_min = min(get(value), na.rm=TRUE))
data_analy$test_max <- ifelse(grepl("Inf", data_analy$test_max), NA, data_analy$test_max)
data_analy$test_min <- ifelse(grepl("Inf", data_analy$test_min), NA, data_analy$test_min)
data_analy$month <- NA
data_analy$month <-
ifelse(grepl(paste0(years[[1]], "-05"), data_analy$day) |
grepl(paste0(years[[2]], "-05"), data_analy$day), "May",
ifelse(grepl(paste0(years[[1]], "-06"), data_analy$day) |
grepl(paste0(years[[2]], "-06"), data_analy$day), "June",
ifelse(grepl(paste0(years[[1]], "-07"), data_analy$day) |
grepl(paste0(years[[2]], "-07"), data_analy$day), "July",
"August")))
#get rid of random days that aren't full dates
data_analy <- data_analy[grepl(".{10}", data_analy$day), ]
data_analy <- data_analy %>%
group_by(month, verticalPosition) %>%
summarize(mmax = mean(test_max, na.rm=TRUE),
mmin = mean(test_min, na.rm=TRUE),
sd_max = sd(test_max, na.rm=TRUE),
sd_min = sd(test_min, na.rm=TRUE))
# quant_95 = quantile(test_max, c(0.95), na.rm=TRUE),
# quant_05 = quantile(test_min, c(0.05), na.rm=TRUE))
#base ggplot, all months on same graph
data_analy$month_f <- factor(data_analy$month, levels=c("May", "June", "July", "August"))
#CORRECT HEIGHTS (according to tower dimensions, not downloaded data)
data_analy$verticalPosition <-
ifelse(data_analy$verticalPosition == 10, 5.8,
ifelse(data_analy$verticalPosition == 20, 19.2,
ifelse(data_analy$verticalPosition == 30, 26,
ifelse(data_analy$verticalPosition == 40, 32.9,
ifelse(data_analy$verticalPosition == 50, 38,
ifelse(data_analy$verticalPosition == 60, 51.8,
data_analy$verticalPosition))))))
data_analy$vertPos_jitter <- NA
if(!i == 2){
data_analy$vertPos_jitter <-
ifelse(data_analy$month == "May", data_analy$verticalPosition + 0.05,
ifelse(data_analy$month == "June", data_analy$verticalPosition + 0.25,
ifelse(data_analy$month == "July", data_analy$verticalPosition + 0.5,
data_analy$verticalPosition + 0.75)))
} else {
data_analy$vertPos_jitter <-
ifelse(data_analy$month == "May" & data_analy$verticalPosition == 0,
data_analy$verticalPosition + 0.05,
ifelse(data_analy$month == "June" & data_analy$verticalPosition == 0,
data_analy$verticalPosition + 0.25,
ifelse(data_analy$month == "July" & data_analy$verticalPosition == 0,
data_analy$verticalPosition + 0.5,
ifelse(data_analy$month == "August" & data_analy$verticalPosition == 0,
data_analy$verticalPosition + 0.75,
ifelse(data_analy$month == "May" & data_analy$verticalPosition == 60,
data_analy$verticalPosition - 0.75,
ifelse(data_analy$month == "June" & data_analy$verticalPosition == 60,
data_analy$verticalPosition - 0.5,
ifelse(data_analy$month == "July" & data_analy$verticalPosition == 60,
data_analy$verticalPosition - 0.25,
data_analy$verticalPosition - 0.05)))))))
}
graph <-
data_analy %>%
arrange(verticalPosition) %>%
ggplot() +
scale_color_manual(values = c("dark orange", "red", "dark green", "blue"),
name = "Month") +
geom_point(aes(x = mmax, y = vertPos_jitter, color = month_f), shape=19, position = "jitter") +
geom_point(aes(x = mmin, y = vertPos_jitter, color = month_f), shape=17, position = "jitter") +
geom_path(aes(x = mmax, y = vertPos_jitter, color = month_f,
linetype = "Max"), size = 1) +
geom_path(aes(x = mmin, y = vertPos_jitter, color = month_f,
linetype = "Min"), size = 1) +
ggplot2::geom_errorbarh(aes(xmin=mmax-sd_min, xmax=mmax+sd_max, y=vertPos_jitter, color = month_f, linetype = "Max", height=0.8)) +
ggplot2::geom_errorbarh(aes(xmin=mmin-sd_min, xmax=mmin+sd_max, y=vertPos_jitter, color = month_f, linetype = "Min", height=0.8)) +
labs(x = dp$xlabs[[i]], y = "Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_bw() +
guides(linetype = guide_legend("Line type"))
if(!i == 1){
graph <- graph + theme(axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y = element_blank())
}
if(i == 2){
graph <- graph + scale_x_continuous(breaks=c(40,60,80,100))
}
if(i == 3){
graph <-
graph +
labs(x= expression(paste("T"["air"], " [",degree,"C]"))) +
scale_x_continuous(breaks=c(10,20,30), limits=c(5,35))
}
# if(i == 4){
#   graph <-
#     graph +
#     labs(x = expression(paste("T"["biological"], " [",degree,"C]"))) +
#     scale_x_continuous(breaks=c(10,20,30), limits=c(5,35))
# }
assign(paste0(dp$data[[i]], "_plot"), graph)
}
library(ggplot2)
#1. NEON vertical height profiles
source('scripts/vertical_height_neon.R', echo=TRUE)
NEON_list <- list(wind_plot, RH_plot, SAAT_plot) #,"biotemp_plot")
names(NEON_list) <- c("wind_plot", "RH_plot", "SAAT_plot") #,"biotemp_plot
#2 height by crown position in 2018 ####
library(RCurl) #2
library(tidyr) #2
library(grid) #2
library(gridExtra) #2
##2a. heights for all cored trees ####
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE) #these graphs are meant to be for all cored trees, not just the ones being used in analysis
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
current_ht <- trees_all[!duplicated(trees_all$tree), ]
current_ht$year <- 2018
current_ht <- current_ht[,c(1:4,13:15,17:19)]
current_ht$dbh_old.mm <- scbi.stem3$dbh[match(current_ht$tree, scbi.stem3$tag)]
current_ht$dbh_old.cm <- current_ht$dbh_old.mm/10
current_ht$dbh.ln.cm <- log(current_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
current_ht$height.ln.m <-
ifelse(current_ht$sp == "caco", (0.348+0.808*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cagl", (0.681+0.704*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "caovl", (0.621+0.722*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "cato", (0.776+0.701*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fagr", (0.708+0.662*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "fram", (0.715+0.619*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "juni", (1.22+0.49*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "litu", (1.32+0.524*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qual", (1.14+0.548*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "qupr", (0.44+0.751*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quru", (1.17+0.533*current_ht$dbh.ln.cm),
ifelse(current_ht$sp == "quve", (0.864+0.585*current_ht$dbh.ln.cm),
(0.791+0.645*current_ht$dbh.ln.cm)))))))))))))
current_ht$height.m <- exp(current_ht$height.ln.m)
current_ht <- current_ht[order(current_ht$tree, current_ht$year), ]
#graphing height by crown position (for paper)
current_ht <- current_ht[!is.na(current_ht$position_all), ]
current_ht$position_all_abb <- substring(current_ht$position_all, 0, 1)
current_ht$position_all_abb <- toupper(current_ht$position_all_abb)
current_ht$position_all_abb <- factor(current_ht$position_all_abb, levels = c("D", "C", "I", "S"))
heights <-
ggplot(data = current_ht, aes(x = position_all_abb, y = height.m, group = position_all)) +
# aes(x=position_all, y=height.m, fill=year) +
geom_boxplot() +
xlab("Crown position") +
ylab("Height [m]") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6), limits=c(0,60)) +
theme_minimal() +
theme(axis.text = element_text(size=12)) +
theme(axis.title = element_text(size=14))
##2b. get height data for all trees >10cm dbh in census ####
scbi.stem3 <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/census-csv-files/scbi.stem3.csv"), stringsAsFactors = FALSE)
scbi.stem3$dbh <- as.numeric(scbi.stem3$dbh)
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi18_ht <- scbi.stem3
scbi18_ht <- scbi18_ht[scbi18_ht$dbh>=100, ]
scbi18_ht <- scbi18_ht[,c(2:5,11,14:15)]
scbi18_ht$dbh_old.cm <- scbi18_ht$dbh/10
scbi18_ht$dbh.ln.cm <- log(scbi18_ht$dbh_old.cm)
#linear log-log regression
#the full equation is using all points for which we have data to create the equation, despite that for several species we don't have enough data to get a sp-specific equation
scbi18_ht$height.ln.m <-
ifelse(scbi18_ht$sp == "caco", (0.348+0.808*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cagl", (0.681+0.704*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "caovl", (0.621+0.722*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "cato", (0.776+0.701*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fagr", (0.708+0.662*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "fram", (0.715+0.619*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "juni", (1.22+0.49*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "litu", (1.32+0.524*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qual", (1.14+0.548*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "qupr", (0.44+0.751*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quru", (1.17+0.533*scbi18_ht$dbh.ln.cm),
ifelse(scbi18_ht$sp == "quve", (0.864+0.585*scbi18_ht$dbh.ln.cm),
(0.791+0.645*scbi18_ht$dbh.ln.cm)))))))))))))
scbi18_ht$height.m <- exp(scbi18_ht$height.ln.m) #used below in #4
#######################################################################################
#3 Get PLA and TLP as function of TWI and height ####
library(ggstance)
library(raster)
library(dplyr)
library(Hmisc)
library(magrittr)
##3a. get TWI values for all trees in census, add trait values ####
scbi.stem3$dbh <- ifelse(is.na(scbi.stem3$dbh), 0, scbi.stem3$dbh)
scbi.stem3 <- scbi.stem3[scbi.stem3$dbh >= 100, ] #>10cm dbh
#get utm coords
source('E:/Github_SCBI/SCBI-ForestGEO-Data/R_scripts/SIGEO_plot_grid_UTMcoord.R', echo=TRUE)
plot_to_UTM(scbi.stem3)
scbi18 <- sigeo_coords
scbi18 <- scbi18[, c(2:5,20:21)]
scbi18_x <- scbi18[, c(5:6)]
topo <- raster("data/plot_TWI.tif")
twi <- raster::extract(topo, scbi18_x, method="simple")
scbi18$TWI <- twi
scbi18$TWI.ln <- log(scbi18$TWI)
#add in leaf traits (no rp because it's categorical)
leaf_traits <- trees_all[, c(4,6:8)]
for (i in seq(along=2:ncol(leaf_traits))){
trait <- colnames(leaf_traits[2:ncol(leaf_traits)])
scbi18[, trait[[i]]] <- leaf_traits[, trait[[i]]][match(scbi18$sp, leaf_traits$sp)]
}
##3b. create height groupings and graphs (Figure S1) ####
scbi18$height.m <- scbi18_ht$height.m[match(scbi18$stemID, scbi18_ht$stemID)]
scbi18$bins <- cut2(scbi18$height.m, g=19)
scbi18$bins_TWI <- cut2(scbi18$TWI, g=20)
type = c("tlp_ht", "pla_ht", "tlp_twi", "pla_twi")
var = c("mean_TLP_Mpa", "PLA_dry_percent", "mean_TLP_Mpa", "PLA_dry_percent")
breaks_tlp = c(-2.8,-2.6,-2.4,-2.2,-2.0,-1.8)
breaks_pla = c(8,12,16,20,24)
limits_tlp = c(-2.8,-1.8)
limits_pla = c(8,26)
for (i in seq(along=1:4)){
if(!grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$lab <- seq(5,95,by=5) #percentiles
df$num <- gsub("^.*,", "", df$bins) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
} else if (grepl("twi", type[[i]])){
df <- scbi18 %>%
group_by(bins_TWI) %>%
dplyr::summarize(avg = mean(eval(parse(text = var[i])), na.rm=TRUE),
dev = sd(eval(parse(text = var[i])), na.rm=TRUE),
no_data = (sum(is.na(eval(parse(text = var[i]))))/length(eval(parse(text = var[i])))))
df$sdmin <- df$avg - df$dev
df$sdmax <- df$avg + df$dev
df$col <- ifelse(df$no_data > 0.25, "grey", "black")
df$num <- gsub("^.*,", "", df$bins_TWI) #upper bound of bin
df$num <- gsub("[[:punct:]]$", "", df$num)
df$num <- as.numeric(df$num)
}
#create plots
if(!grepl("twi", type[[i]])){
q <- ggplot(df, aes(x = avg, y = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbarh(aes(y = num, xmin = sdmin, xmax = sdmax, height=0.5, color=col)) +
scale_y_continuous(breaks=c(0,10,20,30,40,50,60), limits=c(0,60)) +
geom_path(aes(x=avg, y=num, color=col, group=1)) +
ylab("Height [m]") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==1){
q <- q +
xlab("TLP [MPa]") +
scale_x_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==2){
q <- q +
xlab("PLA [%]") +
scale_x_continuous(breaks=breaks_pla, limits=limits_pla)
}
} else if(grepl("twi", type[[i]])){
q <-
ggplot(df[!is.na(df$bins_TWI), ], aes(y = avg, x = num)) +
geom_point(aes(color=col)) +
scale_color_manual(values=c("black", "grey")) +
ggplot2::geom_errorbar(aes(x = num, ymin = sdmin, ymax = sdmax, width=0.25, color=col)) +
geom_path(aes(x=num, y=avg, color=col, group=1)) +
scale_x_continuous(breaks=c(2,6,10,14), limits=c(0,16)) +
xlab("Topographic wetness index") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=12),
axis.title = element_text(size=14))
if(i==3){
q <- q +
ylab("Mean turgor loss point [MPa]") +
scale_y_continuous(breaks=breaks_tlp, limits=limits_tlp)
} else if(i==4){
q <- q +
ylab("Percent leaf area [%]") +
scale_y_continuous(breaks=breaks_pla, limits=limits_pla)
}
}
assign(paste0("plot_", type[i]), q)
}
#######################################################################################
#4 Export the graphs ####
library(ggpubr)
library(extrafont)
library(rasterVis)
loadfonts(device="win") #to get TNR
quantile(current_ht$height.m, c(.95), na.rm=TRUE) #95% quantile = 35.002m
quant <- data.frame(yintercept = 35.0022, Lines = "95th percentile")
NEON_order <- c("(a)", "(b)", "(c)")
NEON_order_x <- c(0.5, 35, 7.5)
NEON_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
NEON_list[[i]] <-
NEON_list[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=NEON_order_x[[i]], y=NEON_order_y[[i]],
label = NEON_order[[i]], fontface="bold", size=7)
if(i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.title = element_blank(),
legend.box = "vertical",
legend.position = c(0.8, 0.85),
legend.background = element_rect(fill=alpha("white", 0.01)),
legend.text=element_text(size=12),
legend.key.size=unit(4,"mm"),
legend.spacing=unit(-0.5,"cm")
)
}
if(!i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(legend.position = "none")
}
if(!i==3){
NEON_list[[i]] <-
NEON_list[[i]] +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
}
NEON <- ggarrange(NEON_list$wind_plot, NEON_list$RH_plot, NEON_list$SAAT_plot,  nrow=1, ncol=3, align="h")
###format the other height graphs
plots_bw <- list(heights, plot_pla_ht, plot_tlp_ht)
names(plots_bw) <- c("heights", "plot_pla_ht", "plot_tlp_ht")
plots_bw_order <- c("(d)", "(e)", "(f)")
plots_bw_order_x <- c(0.8, 9, -2.75)
plots_bw_order_y <- c(57.5, 57.5, 57.5)
for (i in seq(along=1:3)){
plots_bw[[i]] <- #all graphs
plots_bw[[i]] +
theme_bw(base_size = 16) +
# theme_bw(base_family = "serif") + #for TNR font
geom_hline(aes(yintercept = yintercept), linetype = "longdash", quant) +
annotate(geom="text", x=plots_bw_order_x[[i]], y=plots_bw_order_y[[i]],
label = plots_bw_order[[i]], fontface="bold", size=7)
if(!i == 1){ #only trait graphs
plots_bw[[i]] <-
plots_bw[[i]] +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
}
}
heights_other <- ggarrange(plots_bw$heights, plots_bw$plot_pla_ht, plots_bw$plot_tlp_ht, nrow=1, ncol=3)
###put plots together
png("manuscript/tables_figures/Figure2.png", width=11, height=11, units="in", res=300)
ggarrange(NEON, heights_other, nrow=2, ncol=1)
dev.off()
