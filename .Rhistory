coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(names(model_df[j]), "model_var")
#put r2 in table
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0(names(model_df[j]), "_", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(r,coeff)
coeff$dAICc <- var_aic$Delta_AICc[[w]]
coeff$dAICc <- round(coeff$dAICc, 2)
setnames(coeff, old="dAICc", new=paste0("dAICc_", names(model_df[j]), "_", w))
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
}
}
top_models <- rbind(top_models, top)
}
coeff_table <-
coeff_list %>%
reduce(left_join, by = "model_var")
i=1
j=1
response <- "resist.value"
effects <- best_mod_full
#create all combinations of random / fixed effects
effects_comb <-
unlist(sapply(seq_len(length(effects)), function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
#pair response with effect and sub out combinations that don't include random effects
#in general, if two variables are >70% correlated, you can toss one of them without significantly affecting the results
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
# formulas for all combinations. $Var1 is the response, and $Var2 is the effect
# for good stats, you should have no more total parameters than 1/10th the number of observations in your dataset
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
var_aic$mod_no <- rownames(var_aic)
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(names(model_df[j]), "model_var")
#put r2 in table
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0(names(model_df[j]), "_", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(r,coeff)
coeff$dAICc <- var_aic$Delta_AICc[[w]]
coeff$dAICc <- round(coeff$dAICc, 2)
setnames(coeff, old="dAICc", new=paste0("dAICc_", names(model_df[j]), "_", w))
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
z=123
w=1
names(lmm_all[z]) == var_aic$Modnames[[w]]
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(names(model_df[j]), "model_var")
#put r2 in table
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0(names(model_df[j]), "_", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(r,coeff)
View(r)
View(coeff)
top_models <- NULL
coeff_list <- list()
for (i in seq(along=c(1:4))){
for (j in seq(along=model_df)){
#ALL YEARS
if(j == 1 & i == 1){
response <- "resist.value"
effects <- best_mod_full
#create all combinations of random / fixed effects
effects_comb <-
unlist(sapply(seq_len(length(effects)), function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
#pair response with effect and sub out combinations that don't include random effects
#in general, if two variables are >70% correlated, you can toss one of them without significantly affecting the results
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
# formulas for all combinations. $Var1 is the response, and $Var2 is the effect
# for good stats, you should have no more total parameters than 1/10th the number of observations in your dataset
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
var_aic$mod_no <- rownames(var_aic)
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(paste0(names(model_df[j]), "_", w), "model_var")
#put r2 in table
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0(names(model_df[j]), "_", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(r,coeff)
coeff$dAICc <- var_aic$Delta_AICc[[w]]
coeff$dAICc <- round(coeff$dAICc, 2)
setnames(coeff, old="dAICc", new=paste0("dAICc_", names(model_df[j]), "_", w))
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
#INDIVIDUAL YEARS
} else if (j == i){
response <- "resist.value"
effects <- best_mod_full_year
#create all combinations of random / fixed effects
effects_comb <-
unlist( sapply( seq_len(length(effects)),
function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb$Var2 <- as.character(var_comb$Var2)
#can't have height and TWI separately when the interaction is in
for (q in seq(along=var_comb$Var2)){
cell <- var_comb$Var2[[q]]
if(grepl("\\*", cell)){
if(grepl("\\+TWI.ln", cell)){
var_comb$Var2[[q]] <- gsub("\\+TWI.ln", "", var_comb$Var2[[q]])
}
if(grepl("\\+height.ln.m", cell)){
var_comb$Var2[[q]] <- gsub("\\+height.ln.m\\+", "\\+", var_comb$Var2[[q]])
}
}
}
var_comb <- unique(var_comb[,1:2])
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = model_df[[j]], REML=FALSE,
control = lmerControl(optimizer ="Nelder_Mead"))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
var_aic$Modnames <- as.character(var_aic$Modnames)
best_mod_traits$best_model[[i]] <- var_aic$Modnames[[1]]
#get all mods <2 dAIC
var_aic <- var_aic[var_aic$Delta_AICc <= 2, ]
top <- var_aic[,c(1,4)]
top$Delta_AICc <- round(top$Delta_AICc, 2)
top$scenario <- mods[[i]]
top$coef <- NA
for (z in seq(along = lmm_all)){
for (w in seq(along=1:nrow(var_aic))){
if (names(lmm_all[z]) == var_aic$Modnames[[w]]){
#run the best model alone with REML=TRUE
fit1 <- lmer(formula_vec[[z]], data = model_df[[j]], REML=TRUE,
control = lmerControl(optimizer ="Nelder_Mead"))
#get coefficients and put in table
coeff <- data.frame(coef(summary(fit1))[ , "Estimate"]) ##2
coeff[,2] <- rownames(coeff)
coeff[,1] <- round(coeff[,1], 3)
colnames(coeff) <- c(paste0(names(model_df[j]), "_", w), "model_var")
#put r2 in table
r <- rsquared(fit1) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
r <- data.frame(r[,6])
colnames(r) <- paste0(names(model_df[j]), "_", w)
r$model_var <- "r^2"
r[,1] <- round(r[,1], 2)
coeff <- rbind(r,coeff)
coeff$dAICc <- var_aic$Delta_AICc[[w]]
coeff$dAICc <- round(coeff$dAICc, 2)
setnames(coeff, old="dAICc", new=paste0("dAICc_", names(model_df[j]), "_", w))
coeff_list[[paste0("coeff_", names(model_df[j]), "_", w)]] <- coeff
}
}
}
}
}
top_models <- rbind(top_models, top)
}
coeff_table <-
coeff_list %>%
reduce(left_join, by = "model_var")
View(coeff_table)
model_df[[1]]
View(model_df[[1]])
trees_all_sub$dbh.cm <- exp(trees_all_sub$dbh.ln.cm
)
median(trees_all_sub$dbh.cm)
range(trees_all_sub$dbh.cm)
View(trees_all_sub)
trees_all_sub$height.m <- exp(trees_all_sub$height.ln.m)
median(trees_all_sub$height.m)
range(trees_all_sub$height.m)
median(trees_all_sub$PLA_dry_percent)
range(trees_all_sub$PLA_dry_percent)
median(trees_all_sub$LMA_g_per_m2)
range(trees_all_sub$LMA_g_per_m2)
median(trees_all_sub$WD_g_per_cm3)
range(trees_all_sub$WD_g_per_cm3)
median(trees_all_sub$mean_TLP_Mpa)
range(trees_all_sub$mean_TLP_Mpa)
trees_all_stats <-
trees_all_sub %>%
summarize(median_PLA = median(PLA_dry_percent))
View(trees_all_stats)
colnames(trees_all_sub[,7])
names(trees_all_sub[,7])
blarg <- c("PLA_dry_percent", "tooth")
median(which(colnames(trees_all_sub)==blarg[[1]]))
which(colnames(trees_all_sub)==blarg[[1]])
colnames(trees_all_sub)==blarg[[1]]
median(trees_all_sub[, which(colnames(trees_all_sub)==blarg[[1]])])
paste0("median_", blarg[[1]])
trees_all_stats <- NULL``
trees_all_stats <- NULL
trees_all_stats <- trees_all_sub[,c(7:10,18,19)]
trees_all_stats <-
trees_all_sub %>%
summarize(median = median())
trees_all_stats <-
trees_all_sub %>%
summarize(median = median(PLA_dry_percent))
trees_all_stats <-
trees_all_sub %>%
summarize(median = median(PLA_dry_percent),
range = range(PLA_dry_percent))
trees_all_stats <-
trees_all_sub %>%
summarize(median = median(PLA_dry_percent),
min = min(PLA_dry_percent),
max = max(PLA_dry_percent))
i=1
median(trees_all_stats[, which(colnames(trees_all_stats)==colnames(trees_all_stats[[i]]))])
colnames(trees_all_stats[[i]])
colnames(trees_all_stats)
trees_all_stats <- trees_all_sub[,c(7:10,18,19)]
colnames(trees_all_stats)
colnames(trees_all_stats[[i]])
colnames(trees_all_stats[i])
median(colnames(trees_all_stats[i])
)
tree_stats <-
trees_all_sub %>%
summarize(median = median(colnames(trees_all_stats[i])),
min = min(PLA_dry_percent),
max = max(PLA_dry_percent))
View(tree_stats)
trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == name_trait)]),
min = min(PLA_dry_percent),
max = max(PLA_dry_percent))
name_trait <- trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == name_trait)]),
min = min(PLA_dry_percent),
max = max(PLA_dry_percent))
colnames(name_trait))
colnames(name_trait)
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(PLA_dry_percent),
max = max(PLA_dry_percent))
stats <- NULL
for(i in seq(along=trees_all_sub[,c(7:10,18,19)])){
name_trait <- trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
stats <- rbind(stats, trees_all_stats)
}
stats <- NULL
for(i in seq(along=trees_all_sub[,c(7:10,18,19)])){
name_trait <- trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
stats <- rbind(stats, trees_stats)
}
stats <- NULL
for(i in seq(along=trees_all_sub[,c(7:10,18,19)])){
name_trait <- trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
stats <- rbind(stats, tree_stats)
}
View(stats)
name_trait
colnames(name_trait)
stats <- NULL
for(i in seq(along=trees_all_sub[,c(7:10,18,19)])){
name_trait <- trees_all_sub[,c(7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
tree_stats$trait <- colnames(name_trait)
stats <- rbind(stats, tree_stats)
}
View(stats)
stats <- NULL
for(i in seq(along=trees_all_sub[,c(5,7:10,18,19)])){
name_trait <- trees_all_sub[,c(5,7:10,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
tree_stats$trait <- colnames(name_trait)
stats <- rbind(stats, tree_stats)
}
stats <- NULL
for(i in seq(along=trees_all_sub[,c(5,7:10,16,18,19)])){
name_trait <- trees_all_sub[,c(5,7:10,16,18,19)][i]
tree_stats <-
trees_all_sub %>%
summarize(median = median(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
min = min(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))]),
max = max(trees_all_sub[, which(colnames(trees_all_sub) == colnames(name_trait))])
)
tree_stats$trait <- colnames(name_trait)
stats <- rbind(stats, tree_stats)
}
sum_table <- data.frame("year" = c(1966, 1977, 1999),
"prop_growth" = NA,
"prop_pointer" = NA)
for (i in seq(along=sum_table$year)){
full_ind_sub <- full_ind[full_ind$year %in% sum_table$year[[i]],  ]
sum_table$prop_growth[[i]] <- (sum(full_ind_sub$nb.series*(full_ind_sub$perc.neg/100))/sum(full_ind_sub$nb.series))*100
sum_table$prop_growth[[i]] <- round(sum_table$prop_growth[[i]], 2)
sum_table$prop_pointer[[i]] <- (nrow(full_ind_sub[full_ind_sub$nature == -1, ])/nrow(full_ind_sub))*100
sum_table$prop_pointer[[i]] <- round(sum_table$prop_pointer[[i]], 2)
}
View(sum_table)
View(full_ind_sub)
i=1
full_ind_sub <- full_ind[full_ind$year %in% sum_table$year[[i]],  ]
View(full_ind_sub)
View(pointers)
full_ind_sub$test <- full_ind_sub$nb.series*full_ind_sub$perc.neg
View(full_ind_sub)
full_ind_sub$test <- full_ind_sub$nb.series*(full_ind_sub$perc.neg/100)
View(full_ind_sub)
full_ind_sub <- full_ind_sub[,c(1:4,13:15)]
full_ind_sub$test <- round(full_ind_sub$test, 2)
sum(full_ind_nb.series)
sum(full_ind_sub$nb.series)
sum(full_ind_sub$test)
550/155*100
(550/155)*100
(155/550)*100
View(pointers)
View(years_bysp)
View(years_point)
sum(years_bysp$nb.series)
bleh <- years_bysp[years_bysp$year %in% 1964:1966, ]
sum(bleh$nb.series)
bleh <- years_bysp[years_bysp$year == 1977, ]
sum(bleh$nb.series)
bleh <- years_bysp[years_bysp$year == 1999, ]
sum(bleh$nb.series)
sum(bleh$nb.series*(bleh$perc.neg/100))
bleh$nb.series*(bleh$perc.neg/100)
round(sum(bleh$nb.series*(bleh$perc.neg/100)), 0)
bleh <- years_bysp[years_bysp$year == 1977, ]
round(sum(bleh$nb.series*(bleh$perc.neg/100)), 0)
bleh <- years_bysp[years_bysp$year %in% 1964:1966, ]
round(sum(bleh$nb.series*(bleh$perc.neg/100)), 0)
sum(153,60,79)
153/507
60/547
79/579
library(RCurl)
library(tidyr)
library(data.table)
library(dplyr)
species <- read.csv("data/core_list_for_neil.csv", stringsAsFactors = FALSE)
table <- species[, c(1:3,6,17)]
positions <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv"))
table$position_all <- positions$crown.position[match(table$tag, positions$tag)]
table$position_all <- gsub("D", "dominant", table$position_all)
table$position_all <- gsub("C", "co-dominant", table$position_all)
table$position_all <- gsub("I", "intermediate", table$position_all)
table$position_all <- gsub("S", "suppressed", table$position_all)
table1 <- table %>%
group_by(sp) %>%
summarize(n_cores=n())
table2 <- table %>%
group_by(sp, position_all) %>%
summarize(count=n())
table2 <- spread(table2, key=position_all, value=count)
setnames(table2, old="<NA>", new="prior dead")
table2$n_cores <- table1$n_cores[match(table2$sp, table1$sp)]
table2 <- table2[, c(1,7,3,2,4:6)]
table2 <- table2[!table2$sp %in% c("frni", "pist"), ]
#bring in trait values
trees_all <- read.csv("manuscript/tables_figures/trees_all.csv", stringsAsFactors = FALSE)
traits <- trees_all[,c(2,6:10)]
traits <- traits[!duplicated(traits$sp), ]
table2 <- merge(table2, traits, by="sp")
table2[,c(9:12)] <- round(table2[,c(9:12)], 2)
#bring in mean DBH and DBH range for each species
dbh_cored <- species[,c(1:9)]
dbh_cored <- dbh_cored %>%
group_by(sp) %>%
summarise(mean = mean(dbh2018),
range = max(dbh2018) - min(dbh2018))
dbh_cored$mean <- round(dbh_cored$mean, 2)
table2 <- merge(dbh_cored, table2, by = "sp")
setnames(table2, old=c("mean", "range", "rp", "PLA_dry_percent", "LMA_g_per_m2", "mean_TLP_Mpa", "WD_g_per_cm3"), new=c("mean_DBH", "range_DBH", "RP", "PLA", "LMA", "TLP", "WD"))
View(table2)
table2_SI <- table2[,c(4:9)]
table2 <- table2[,-c(4:9)]
write.csv(table2, "manuscript/tables_figures/Table2.csv", row.names=FALSE)
write.csv(table2_SI, "manuscript/tables_figures/TableS2.csv", row.names=FALSE)
